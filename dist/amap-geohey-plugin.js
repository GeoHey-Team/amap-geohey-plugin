/*
 * GeoHey AMap Plugin v0.0.5
 * GeoHey.com
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.AMapGeoHey = {})));
}(this, (function (exports) { 'use strict';

// Object.assign
// Missing in IE
if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) {
      // .length of function is 2
      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}

function HeatColorRamp() {

    this.colors = {};

    this.colors["color-ramp-heat-blue2red"] = { 0.2: "#0000ff", 0.4: "#00ffff", 0.6: "#00ff00", 0.8: "#ffff00", 1: "#ff0000" };
    this.colors["color-ramp-heat-purple2white"] = { 0.2: "#814bab", 0.4: "#8e1498", 0.6: "#d53448", 0.8: "#fdd944", 1: "#ffffff" };
    this.colors["color-ramp-heat-blue2pink"] = { 0.2: "#636cea", 0.4: "#1b16d5", 0.6: "#be1c4d", 0.8: "#f79390", 1: "#ffffcc" };
}

HeatColorRamp.prototype.getColorName = function (value) {
    if (!value) return null;
    for (var colorName in this.colors) {
        if (_.isEqual(this.colors[colorName], value)) return colorName;
    }
};

HeatColorRamp.prototype.getColor = function (name) {
    return this.colors[name];
};

function ColorRamp() {

    this.colors = {};

    this.colors["color-ramp-green"] = ['#00B050', '#ffffff'];
    this.colors["color-ramp-blue"] = ['#0070c0', '#ffffff'];
    this.colors["color-ramp-red"] = ['#C00000', '#ffffff'];
    this.colors["color-ramp-purple"] = ['#7030A0', '#ffffff'];
    this.colors["color-ramp-black"] = ['#000000', '#ffffff'];
    this.colors["color-ramp-orange"] = ['#FFC000', '#ffffff'];
    this.colors["color-ramp-yellow"] = ['#FFFF00', '#ffffff'];
    this.colors["color-ramp-green-red"] = ['#C00000', '#00B050'];
    this.colors["color-ramp-blue-red"] = ['#C00000', '#0070c0'];
    //
    this.colors["color-ramp-temperature"] = ['#fffcff', '#fff5ff', '#ffedff', '#ffe5ff', '#ffdeff', '#ffd6ff', '#ffcfff', '#ffc7ff', '#ffbfff', '#ffb8ff', '#ffb0ff', '#ffa8ff', '#ffa1ff', '#ff99ff', '#ff91ff', '#ff8aff', '#ff82ff', '#ff7aff', '#ff73ff', '#ff6bff', '#ff63ff', '#ff5cff', '#ff54ff', '#ff4cff', '#ff45ff', '#ff3dff', '#ff36ff', '#ff2eff', '#ff26ff', '#ff1fff', '#ff17ff', '#ff0fff', '#ff08ff', '#ff00ff', '#ff00ff', '#fb00ff', '#f700ff', '#f200ff', '#ee00ff', '#ea00ff', '#e600ff', '#e100ff', '#dd00ff', '#d900ff', '#d400ff', '#d000ff', '#cc00ff', '#c800ff', '#c400ff', '#bf00ff', '#bb00ff', '#b700ff', '#b300ff', '#ae00ff', '#aa00ff', '#a600ff', '#a200ff', '#9d00ff', '#9900ff', '#9500ff', '#9000ff', '#8c00ff', '#8800ff', '#8400ff', '#8000ff', '#7b00ff', '#7700ff', '#7300ff', '#6f00ff', '#6a00ff', '#6600ff', '#6200ff', '#5d00ff', '#5900ff', '#5500ff', '#5100ff', '#4c00ff', '#4800ff', '#4400ff', '#4000ff', '#3c00ff', '#3700ff', '#3300ff', '#2f00ff', '#2b00ff', '#2600ff', '#2200ff', '#1e00ff', '#1900ff', '#1500ff', '#1100ff', '#0d00ff', '#0800ff', '#0400ff', '#0000ff', '#0000ff', '#0004ff', '#0008ff', '#000dff', '#0011ff', '#0015ff', '#001aff', '#001eff', '#0022ff', '#0026ff', '#002aff', '#002fff', '#0033ff', '#0037ff', '#003cff', '#0040ff', '#0044ff', '#0048ff', '#004cff', '#0051ff', '#0055ff', '#0059ff', '#005eff', '#0062ff', '#0066ff', '#006aff', '#006eff', '#0073ff', '#0077ff', '#007bff', '#0080ff', '#0084ff', '#0088ff', '#008cff', '#0091ff', '#0095ff', '#0099ff', '#009dff', '#00a2ff', '#00a6ff', '#00aaff', '#00aeff', '#00b3ff', '#00b7ff', '#00bbff', '#00bfff', '#00c4ff', '#00c8ff', '#00ccff', '#00d0ff', '#00d5ff', '#00d9ff', '#00ddff', '#00e1ff', '#00e5ff', '#00eaff', '#00eeff', '#00f2ff', '#00f7ff', '#00fbff', '#00ffff', '#00ffff', '#00fffb', '#00fff7', '#00fff2', '#00ffee', '#00ffea', '#00ffe5', '#00ffe1', '#00ffdd', '#00ffd9', '#00ffd5', '#00ffd0', '#00ffcc', '#00ffc8', '#00ffc4', '#00ffbf', '#00ffbb', '#00ffb7', '#00ffb3', '#00ffae', '#00ffaa', '#00ffa6', '#00ffa2', '#00ff9d', '#00ff99', '#00ff95', '#00ff91', '#00ff8c', '#00ff88', '#00ff84', '#00ff80', '#00ff7b', '#00ff77', '#00ff73', '#00ff6e', '#00ff6a', '#00ff66', '#00ff62', '#00ff5e', '#00ff59', '#00ff55', '#00ff51', '#00ff4c', '#00ff48', '#00ff44', '#00ff40', '#00ff3c', '#00ff37', '#00ff33', '#00ff2f', '#00ff2a', '#00ff26', '#00ff22', '#00ff1e', '#00ff1a', '#00ff15', '#00ff11', '#00ff0d', '#00ff08', '#00ff04', '#00ff00', '#00ff00', '#04ff00', '#09ff00', '#0dff00', '#11ff00', '#15ff00', '#1aff00', '#1eff00', '#22ff00', '#26ff00', '#2bff00', '#2fff00', '#33ff00', '#37ff00', '#3cff00', '#40ff00', '#44ff00', '#48ff00', '#4dff00', '#51ff00', '#55ff00', '#59ff00', '#5eff00', '#62ff00', '#66ff00', '#6aff00', '#6fff00', '#73ff00', '#77ff00', '#7bff00', '#80ff00', '#84ff00', '#88ff00', '#8cff00', '#91ff00', '#95ff00', '#99ff00', '#9dff00', '#a2ff00', '#a6ff00', '#aaff00', '#aeff00', '#b3ff00', '#b7ff00', '#bbff00', '#bfff00', '#c4ff00', '#c8ff00', '#ccff00', '#d0ff00', '#d4ff00', '#d9ff00', '#ddff00', '#e1ff00', '#e5ff00', '#eaff00', '#eeff00', '#f2ff00', '#f6ff00', '#fbff00', '#ffff00', '#ffff00', '#fffb00', '#fff700', '#fff200', '#ffee00', '#ffea00', '#ffe600', '#ffe100', '#ffdd00', '#ffd900', '#ffd500', '#ffd000', '#ffcc00', '#ffc800', '#ffc400', '#ffbf00', '#ffbb00', '#ffb700', '#ffb300', '#ffae00', '#ffaa00', '#ffa600', '#ffa200', '#ff9d00', '#ff9900', '#ff9500', '#ff9100', '#ff8c00', '#ff8800', '#ff8400', '#ff8000', '#ff8000', '#fc7a00', '#fa7900', '#f77300', '#f57200', '#f26d00', '#f06800', '#ed6700', '#eb6200', '#e86100', '#e65c00', '#e35700', '#e05600', '#de5100', '#db4d00', '#d94c00', '#d64700', '#d44700', '#d14200', '#cf3e00', '#cc3d00', '#c93900', '#c73800', '#c43400', '#c23100', '#bf3000', '#bd2c00', '#ba2b00', '#b82800', '#b52400', '#b32400', '#b02000', '#ad2000', '#ab1d00', '#a81900', '#a61900', '#a31600', '#a11500', '#9e1200', '#9c1000', '#990f00', '#960d00', '#940a00', '#910a00', '#8f0700', '#8c0700', '#8a0500', '#870200', '#850200', '#820000', '#800000'].reverse();
    this.colors["color-ramp-coldhotdiverging"] = ['#4575b5', '#4577b5', '#4579b5', '#477eb8', '#4780b8', '#4782b8', '#4783b8', '#4a86b8', '#4a8aba', '#4a8cba', '#4a8dba', '#4d90ba', '#4d92ba', '#4e96bd', '#4e98bd', '#4f9abd', '#4f9cbd', '#4f9ebd', '#4fa0bd', '#52a4bf', '#52a6bf', '#52a7bf', '#52a9bf', '#54abbf', '#55b0c2', '#55b2c2', '#55b3c2', '#57b6c2', '#57b7c2', '#58bbc4', '#58bdc4', '#5abfc4', '#5ac0c4', '#5ac2c4', '#5bc7c7', '#5ec7c5', '#5ec7c3', '#5ec7c2', '#5ec7c0', '#60c9c0', '#60c9bf', '#60c9bd', '#60c9bb', '#63c9ba', '#64ccbb', '#64ccb9', '#64ccb7', '#66ccb6', '#66ccb4', '#66ccb2', '#67cfb3', '#6acfb2', '#6acfb1', '#6acfaf', '#6acfad', '#6bd1ad', '#6dd1ac', '#6dd1ab', '#6dd1a9', '#6dd1a7', '#70d4a9', '#70d4a7', '#70d4a5', '#70d4a4', '#73d4a3', '#74d6a3', '#74d6a2', '#74d6a0', '#75d69f', '#75d69e', '#77d99e', '#77d99d', '#7ad99d', '#7ad99b', '#7ad999', '#7bdb99', '#7ddb99', '#7ddb97', '#7ddb96', '#7ddb94', '#7fdb95', '#81de95', '#81de93', '#81de92', '#83de92', '#83de90', '#84e090', '#84e08f', '#86e08f', '#86e08e', '#86e08c', '#88e38d', '#8be38e', '#8be38c', '#8be38b', '#8ce38b', '#91e68f', '#93e68f', '#94e68f', '#96e68f', '#9ae691', '#9ce892', '#9ee892', '#9fe892', '#a1e892', '#a4e894', '#a7eb96', '#a9eb96', '#aaeb96', '#adeb99', '#afeb99', '#b0eb99', '#b3ed9a', '#b6ed9c', '#b7ed9c', '#b8ed9c', '#baed9c', '#bff0a1', '#c1f0a1', '#c2f0a1', '#c3f0a1', '#c6f0a3', '#c8f2a4', '#caf2a4', '#cbf2a4', '#cef2a7', '#cff2a7', '#d3f5a9', '#d4f5a9', '#d6f5ab', '#d7f5ab', '#d9f5ab', '#dcf7ac', '#def7af', '#dff7af', '#e0f7af', '#e1f7af', '#e6fab4', '#e7fab4', '#e9fab4', '#eafab4', '#ebfab6', '#ecfab6', '#effcb8', '#f1fcb8', '#f2fcbb', '#f3fcbb', '#f4fcbb', '#f8ffbd', '#faffbf', '#fbffbf', '#fcffbf', '#fdffbf', '#feffbf', '#ffffbf', '#ffffbf', '#fffebd', '#fcfab8', '#fcf8b6', '#fcf7b3', '#fcf6b0', '#faf2ad', '#faf1aa', '#faefa8', '#f7eaa3', '#f7e9a1', '#f7e79e', '#f5e39b', '#f5e198', '#f5df96', '#f5dd93', '#f2d78e', '#f2d58c', '#f2d38a', '#f0cf87', '#f0cc84', '#f0c982', '#f0c77f', '#edc27c', '#edbf79', '#edbb76', '#ebb773', '#ebb470', '#ebb16f', '#e8ab6a', '#e8a869', '#e8a566', '#e8a264', '#e69d61', '#e6995f', '#e6965c', '#e39058', '#e38c56', '#e38854', '#e38552', '#e07f4e', '#e07b4c', '#e0774a', '#de7247', '#de6e45', '#de6942', '#de6540', '#db5f3d', '#db5b3b', '#db5639', '#d95236', '#d94d34', '#d94832', '#d6422f', '#d63e2d', '#d6392b', '#d63428', '#d62f27'].reverse();
    this.colors["color-ramp-yellow2green2blue"] = ['#ffff7f', '#fdff7d', '#f8fc79', '#f5fc77', '#f3fc74', '#f0fc72', '#ecfa6e', '#e9fa6c', '#e7fa69', '#e4fa67', '#def763', '#dbf760', '#d8f75e', '#d3f55a', '#d0f558', '#cdf556', '#caf554', '#c4f250', '#c1f24e', '#bdf24b', '#b9f248', '#b4f046', '#b1f043', '#adf041', '#a7ed3d', '#a4ed3d', '#a0ed3b', '#9ced39', '#97eb36', '#92eb34', '#8eeb32', '#8aeb2f', '#84e82c', '#7fe82a', '#7be827', '#76e825', '#71e622', '#6ce620', '#67e61e', '#61e31c', '#5ce319', '#57e316', '#52e314', '#4ce012', '#47e010', '#42e00d', '#3de00b', '#37e009', '#37e009', '#30de09', '#2bde0b', '#23db0b', '#1cdb0b', '#15d90b', '#10d90d', '#0dd610', '#0dd617', '#0fd41f', '#0fd426', '#0fd12c', '#0fd132', '#10cf3a', '#10cf40', '#10cc45', '#10cc4c', '#12c952', '#12c958', '#12c75d', '#14c764', '#13c469', '#13c46f', '#13c273', '#15c27a', '#15bf7e', '#15bf83', '#17bd88', '#17bd8e', '#17ba91', '#17ba97', '#18b89b', '#18b8a0', '#17b5a3', '#17b5a8', '#19b3ab', '#19b3b0', '#19adb0', '#1aa9b0', '#1aa1ad', '#1a9cad', '#1995ab', '#1990ab', '#1993ab', '#1990ab', '#198ba8', '#1989a8', '#1985a6', '#1782a6', '#177ea3', '#177ba3', '#1779a3', '#1775a1', '#1773a1', '#166f9e', '#166c9e', '#14689c', '#14669c', '#14639c', '#145f99', '#145d99', '#135996', '#135796', '#135494', '#125194', '#124f94', '#124b91', '#124991', '#11468f', '#11448f', '#11408c', '#113e8c', '#0f3b8c', '#0f388a', '#0f368a', '#0f3387', '#0f3187', '#0f2e85', '#0f2c85', '#0f2a85', '#0d2682', '#0d2482', '#0d2280', '#0d2080', '#0c1d7d', '#0c1b7d', '#0c197d', '#0c177a', '#0c157a', '#0c1378', '#0c1178', '#0c0f78'].reverse();
    this.colors["color-ramp-cyan2purple"] = ['#00f5f5', '#00f1f5', '#00edf5', '#00e9f5', '#00e5f5', '#00e1f5', '#00dcf5', '#00d8f5', '#00d4f5', '#00d0f5', '#00ccf5', '#00c8f5', '#00c4f5', '#00c0f5', '#00bcf5', '#00b8f5', '#00b4f5', '#00b0f5', '#00acf5', '#00a7f5', '#00a3f5', '#009ff5', '#009bf5', '#0097f5', '#0093f5', '#008ff5', '#008bf5', '#0087f5', '#0083f5', '#007ff5', '#007bf5', '#0076f5', '#0072f5', '#006ef5', '#006af5', '#0066f5', '#0062f5', '#005ef5', '#005af5', '#0056f5', '#0052f5', '#004ef5', '#0049f5', '#0045f5', '#0041f5', '#003df5', '#0039f5', '#0035f5', '#0031f5', '#002df5', '#0029f5', '#0025f5', '#0021f5', '#001df5', '#0019f5', '#0014f5', '#0010f5', '#000cf5', '#0008f5', '#0004f5', '#0000f5', '#0000f5', '#0400f5', '#0800f5', '#0c00f5', '#1000f5', '#1400f5', '#1800f5', '#1d00f5', '#2100f5', '#2500f5', '#2900f5', '#2d00f5', '#3100f5', '#3500f5', '#3900f5', '#3d00f5', '#4100f5', '#4500f5', '#4900f5', '#4e00f5', '#5200f5', '#5600f5', '#5a00f5', '#5e00f5', '#6200f5', '#6600f5', '#6a00f5', '#6e00f5', '#7200f5', '#7600f5', '#7b00f5', '#7f00f5', '#8300f5', '#8700f5', '#8b00f5', '#8f00f5', '#9300f5', '#9700f5', '#9b00f5', '#9f00f5', '#a300f5', '#a700f5', '#ac00f5', '#b000f5', '#b400f5', '#b800f5', '#bc00f5', '#c000f5', '#c400f5', '#c800f5', '#cc00f5', '#d000f5', '#d400f5', '#d800f5', '#dd00f5', '#e100f5', '#e500f5', '#e900f5', '#ed00f5', '#f100f5', '#f500f5'].reverse();
    this.colors["color-ramp-purple2green"] = ['#4d2096', '#4a2196', '#472299', '#452399', '#42249c', '#3f259c', '#3b259c', '#39289e', '#35289e', '#342aa1', '#302aa1', '#2e2ca1', '#2c2ea3', '#2d33a3', '#2e38a6', '#303ea6', '#3244a8', '#3248a8', '#344da8', '#3552ab', '#3758ab', '#385dad', '#3962ad', '#3965ad', '#3c6cb0', '#3c70b0', '#3e77b3', '#3e7bb3', '#4180b3', '#4185b5', '#4389b5', '#4690b8', '#4694b8', '#4798b8', '#489eba', '#4aa2ba', '#4ca8bd', '#4eacbd', '#4eb0bd', '#50b6bf', '#50b9bf', '#54c0c2', '#54c2c0', '#56c4bf', '#56c4bb', '#58c4b7', '#5bc7b7', '#5bc7b3', '#5fc9b2', '#5fc9ae', '#60c9ab', '#62ccaa', '#64cca8', '#65cfa7', '#67cfa4', '#67cfa0', '#6bd19f', '#6bd19c', '#6fd49c', '#70d49a', '#70d496', '#74d696', '#74d693', '#77d993', '#77d990', '#7bdb90', '#7bdb8c', '#7ddb8b', '#7ede89', '#81de89', '#82e087', '#84e085', '#85e084', '#8de388', '#92e38b', '#97e68d', '#9ce68f', '#9fe68f', '#a5e892', '#a8e892', '#aeeb96', '#b1eb96', '#b6eb99', '#baed9a', '#beed9c', '#c3f09e', '#c7f0a1', '#caf0a1', '#cff2a4', '#d3f2a7', '#d8f5a9', '#dbf5ab', '#dff7ac', '#e3f7af', '#e5f7af', '#ebfab4', '#edfab4', '#f2fcb8', '#f4fcb8', '#f7fcbb', '#fcffbd', '#feffbf', '#fffebf', '#ffffbf', '#fbfcbb', '#f8fab6', '#f7fab4', '#f3f7af', '#f0f5ab', '#ecf2a7', '#e8f0a3', '#e7f0a1', '#e2ed9c', '#e0eb99', '#dbe894', '#dae892', '#d6e68f', '#d1e38b', '#cde086', '#cade83', '#c8de81', '#c3db7d', '#c0d97a', '#bbd675', '#b7d473', '#b6d470', '#b1d16d', '#adcf6a', '#a8cc66', '#a3c963', '#a1c960', '#9fc75e', '#9ac45a', '#96c257', '#91bf54', '#8ebf52', '#8abd4f', '#87ba4d', '#83b84a', '#80b847', '#7bb545', '#77b342', '#72b03f', '#6fad3c', '#6cad3b', '#68ab38', '#64a836', '#5fa633', '#5ba331', '#5aa32f', '#55a12d', '#519e2b', '#4d9c28', '#499926', '#469925', '#439623', '#3f9421', '#3b911f', '#378f1d', '#348f1b', '#308c19', '#2e8a17', '#2a8716', '#278714', '#248513', '#208211', '#1d8010', '#1b7d0e', '#187d0c', '#147a0b'].reverse();
    this.colors["color-ramp-brown2blue"] = ['#9c551f', '#9e5a21', '#9e5a23', '#a15f25', '#a36327', '#a6662a', '#a6682b', '#a86b2d', '#ab6f30', '#ab7232', '#ad7434', '#b07937', '#b37e3a', '#b37f3b', '#b5833e', '#b88640', '#b88942', '#ba8d45', '#bd9048', '#bf944a', '#bf974c', '#c29a50', '#c49e52', '#c49f55', '#c7a457', '#c9a85b', '#ccab5e', '#ccad60', '#cfb263', '#d1b566', '#d1b768', '#d4ba6c', '#d6be70', '#d9c373', '#d9c375', '#dbc778', '#decc7c', '#decc7e', '#e0d082', '#e3d386', '#e6d88a', '#e6da8d', '#e8dc90', '#ebe194', '#ebe396', '#ede59a', '#f0e99e', '#f2eba2', '#f2eda4', '#f5f1a9', '#f7f3ac', '#f7f5af', '#faf9b4', '#fcfbb8', '#ffffbd', '#ffffbf', '#ffffbf', '#fafcbb', '#f7fcb8', '#f3fab6', '#eef7b2', '#ebf7af', '#e6f5ab', '#e1f2a7', '#ddf2a4', '#d9f0a3', '#d3ed9f', '#cfed9c', '#caeb99', '#c4e894', '#c1e894', '#bce691', '#b5e38d', '#afe089', '#aae086', '#a6de85', '#9fdb81', '#9bdb7f', '#94d97b', '#8ed678', '#89d675', '#84d474', '#7ed171', '#78d16f', '#73cf6c', '#6bcc68', '#68cc68', '#64c967', '#62c768', '#5fc76a', '#5cc46a', '#59c26b', '#59c26e', '#56bf6f', '#53bd6f', '#52bd72', '#4eba72', '#4db874', '#4cb877', '#48b577', '#45b379', '#44b37c', '#41b07c', '#40ad7e', '#3ead81', '#3cab82', '#39a883', '#37a685', '#37a688', '#34a389', '#32a18b', '#30a18e', '#2e9e8f', '#2d9c91', '#2b9c94', '#299995', '#279696', '#269296', '#238c94', '#238691', '#228291'].reverse();
    this.colors["color-ramp-patrialspectrum"] = ['#f2f1a2', '#f2f19f', '#f2f19e', '#f2f19b', '#f2f199', '#f2f096', '#f5f396', '#f5f393', '#f5f390', '#f5f38e', '#f5f38b', '#f5f389', '#f5f387', '#f5f385', '#f5f382', '#f5f380', '#f5f37d', '#f7f77b', '#f7f779', '#f7f776', '#f7f774', '#f7f771', '#f7f76f', '#f7f76c', '#f7f76b', '#f7f768', '#f7f766', '#f7f763', '#f7f760', '#fafa5f', '#fafa5c', '#fafa5a', '#fafa57', '#fafa55', '#fafa52', '#fafa50', '#fafa4d', '#fafa4b', '#fafa49', '#fafa46', '#fcfc44', '#fcfc41', '#fcfc3f', '#fcfc3c', '#fcfc3a', '#fcfc37', '#fcfc35', '#fcfc32', '#fcfc2f', '#fcfc2d', '#fcfc2a', '#ffff29', '#ffff26', '#ffff24', '#ffff21', '#ffff1f', '#ffff1c', '#ffff19', '#ffff17', '#ffff14', '#ffff12', '#ffff0f', '#ffff0d', '#ffff0a', '#ffff08', '#ffff05', '#ffff03', '#ffff00', '#ffff00', '#fffb00', '#fff700', '#fff200', '#ffee00', '#ffea00', '#ffe600', '#ffe100', '#ffdd00', '#ffd900', '#ffd500', '#ffd000', '#ffcc00', '#ffc800', '#ffc400', '#ffbf00', '#ffbb00', '#ffb700', '#ffb300', '#ffae00', '#ffaa00', '#ffa600', '#ffa200', '#ff9d00', '#ff9900', '#ff9500', '#ff9100', '#ff8c00', '#ff8800', '#ff8400', '#ff8000', '#ff7b00', '#ff7700', '#ff7300', '#ff6f00', '#ff6a00', '#ff6600', '#ff6200', '#ff5e00', '#ff5900', '#ff5500', '#ff5100', '#ff4d00', '#ff4800', '#ff4400', '#ff4000', '#ff3c00', '#ff3700', '#ff3300', '#ff2f00', '#ff2b00', '#ff2600', '#ff2200', '#ff1e00', '#ff1a00', '#ff1500', '#ff1100', '#ff0d00', '#ff0900', '#ff0400', '#ff0000', '#ff0000', '#ff1e00', '#ff3c00', '#ff5900', '#ff7700', '#ff9500', '#ffb300', '#ffd000', '#ffee00', '#f2ff00', '#d4ff00', '#b7ff00', '#99ff00', '#7bfc03', '#5efc03', '#41fc03', '#24fc03', '#07fc03', '#03fc1c', '#03fc39', '#03fc56', '#03fc73', '#03fc90', '#03fcad', '#03fcca', '#03fce7', '#03f4fc', '#03d7fc', '#03bafc', '#039dfc', '#037ffc', '#0362fc', '#0345fc', '#0328fc', '#030bfc', '#1803fc', '#3503fc', '#5203fc', '#6f03fc', '#8c03fc', '#a903fc', '#c603fc', '#e303fc', '#fc03f8', '#fc03db', '#fc03be', '#fc03a1', '#fc0384', '#fc0367', '#fc034a', '#fc032c', '#fc0345', '#fc034a', '#fc034e', '#fc0352', '#fc0356', '#fa0359', '#fa035e', '#fa0362', '#fa0366', '#fa036a', '#fa036e', '#fa0573', '#fa0577', '#fa057b', '#f7057e', '#f70582', '#f70586', '#f7058a', '#f7058e', '#f70592', '#f70596', '#f7059a', '#f5059d', '#f505a1', '#f505a5', '#f505a9', '#f505ad', '#f505b1', '#f505b5', '#f505b9', '#f505bd', '#f208bf', '#f208c3', '#f208c7', '#f208cb', '#f208cf', '#f208d3', '#f208d7', '#f208db', '#f208de', '#f008e1', '#f008e4', '#f008e8', '#f008ec', '#f008f0', '#ec08f0', '#e808f0', '#e408f0', '#de07ed', '#da07ed', '#d607ed', '#d207ed', '#ce07ed', '#cb07ed', '#c707ed', '#c307ed', '#bf07ed', '#bb07ed', '#b707ed', '#b407ed', '#b007ed', '#b007ed', '#ac07ed', '#a707eb', '#a307eb', '#9d07e8', '#9907e8', '#9407e6', '#9107e6', '#8b07e3', '#8707e3', '#8207e0', '#7e07e0', '#7a07de', '#7607de', '#7209db', '#6e09db', '#6a09d9', '#6609d9', '#6108d6', '#5e08d6', '#5a08d4', '#5608d4', '#5208d1', '#4e08d1', '#4a08cf', '#4708cf', '#4308cc', '#4008cc', '#3b08c9', '#3808c9', '#3408c7', '#3108c7', '#2d08c4', '#2a08c4', '#2708c2', '#2408c2', '#2007bf', '#1d07bf', '#1a07bd', '#1707bd', '#1307ba', '#1007ba', '#0d07b8', '#0a07b8', '#0707b5', '#070ab5', '#070db3', '#0710b3', '#0712b0', '#0715b0', '#0717ad', '#071aad', '#071dad'].reverse();
    this.colors["color-ramp-red2blue"] = ['#c44439', '#c4483a', '#c74e3e', '#c75240', '#c95541', '#c95942', '#cc5e46', '#cc6247', '#cc664a', '#cf6b4c', '#cf6d4c', '#d17250', '#d17551', '#d47b55', '#d47f57', '#d48259', '#d6855a', '#d6895c', '#d98e5f', '#d99262', '#db9664', '#db9967', '#db9b67', '#dea06a', '#dea46d', '#e0a870', '#e0ab72', '#e3b076', '#e3b378', '#e3b578', '#e6ba7c', '#e6bd7e', '#e8c182', '#e8c384', '#ebc888', '#ebca88', '#ebcc8a', '#edd18e', '#edd391', '#f0d895', '#f0da98', '#f2dd99', '#f2df9b', '#f2e19e', '#f5e6a1', '#f5e8a4', '#f7eba8', '#f7eca8', '#faf1ad', '#faf2af', '#faf4b1', '#fcf7b6', '#fcf9b8', '#fffdba', '#fffebd', '#ffffbf', '#ffffbf', '#fdffbd', '#fbffbd', '#f5fcb8', '#f3fcb6', '#f0fcb6', '#edfcb3', '#e8faaf', '#e6faaf', '#e3faad', '#e0faad', '#daf7a8', '#d6f7a6', '#d4f7a6', '#d0f7a3', '#caf59f', '#c7f59f', '#c3f59d', '#bff59b', '#baf299', '#b5f296', '#b0f294', '#adf294', '#a6f090', '#a1f08d', '#9ef08d', '#99f08b', '#93ed8a', '#8eed87', '#88ed85', '#85ed85', '#81eb85', '#7feb86', '#7feb8a', '#7ceb8b', '#79e88c', '#79e88f', '#76e891', '#74e893', '#73e695', '#71e698', '#6ee69a', '#6ee69e', '#6ce6a1', '#6be3a3', '#68e3a6', '#66e3a9', '#66e3ad', '#62e0ae', '#61e0b1', '#61e0b6', '#5ee0b9', '#5bdebb', '#5bdec0', '#59dec3', '#56dec7', '#55dbc9', '#53dbcd', '#53dbd2', '#51dbd6', '#4ed9d9', '#4ed4d9', '#4cd0d9', '#4acbd9', '#49c3d6', '#46bed6', '#45b9d6', '#45b4d6', '#42add4', '#3fa7d4', '#3fa2d4', '#3e9dd4', '#3a95d1', '#3a90d1', '#398ad1', '#3985d1', '#367dcf', '#3477cf', '#3472cf', '#326bcf', '#3065cf', '#3060cf'].reverse();
    this.colors["color-ramp-conditionnumber"] = ['#006100', '#026300', '#036600', '#056900', '#076b00', '#096e00', '#0b7000', '#0d7300', '#107500', '#127800', '#147a00', '#177d00', '#1a8000', '#1c8200', '#1f8500', '#228700', '#238a00', '#258c00', '#298f00', '#2c9100', '#2f9400', '#329600', '#369900', '#399c00', '#3d9e00', '#40a100', '#44a300', '#48a600', '#4ca800', '#50ab00', '#54ad00', '#58b000', '#5cb300', '#61b500', '#65b800', '#69ba00', '#6ebd00', '#73bf00', '#78c200', '#7cc400', '#81c700', '#86c900', '#8bcc00', '#91cf00', '#96d100', '#9bd400', '#a1d600', '#a6d900', '#a8db00', '#aede00', '#b3e000', '#b9e300', '#c0e600', '#c5e800', '#cceb00', '#d1ed00', '#d8f000', '#def200', '#e5f500', '#ebf700', '#f2fa00', '#f8fc00', '#ffff00', '#ffff00', '#fffb00', '#fff700', '#fff200', '#ffee00', '#ffea00', '#ffe600', '#ffe100', '#ffdd00', '#ffd900', '#ffd500', '#ffd000', '#ffcc00', '#ffc800', '#ffc400', '#ffbf00', '#ffbb00', '#ffb700', '#ffb300', '#ffae00', '#ffaa00', '#ffa600', '#ffa200', '#ff9d00', '#ff9900', '#ff9500', '#ff9100', '#ff8c00', '#ff8800', '#ff8400', '#ff8000', '#ff7b00', '#ff7700', '#ff7300', '#ff6f00', '#ff6a00', '#ff6600', '#ff6200', '#ff5e00', '#ff5900', '#ff5500', '#ff5100', '#ff4d00', '#ff4800', '#ff4400', '#ff4000', '#ff3c00', '#ff3700', '#ff3300', '#ff2f00', '#ff2b00', '#ff2600', '#ff2200'].reverse();
    this.colors["color-ramp-precipitation"] = ['#c2523c', '#c4543a', '#c45539', '#c7583a', '#c75937', '#c95b36', '#cc5d35', '#cc5e33', '#cf6234', '#cf6332', '#d16630', '#d4682f', '#d46a2d', '#d66e2d', '#d66f2b', '#d97229', '#db7528', '#db7725', '#de7c25', '#de7e24', '#e08121', '#e38520', '#e3871d', '#e68c1e', '#e68e1c', '#e89219', '#eb9617', '#eb9915', '#ed9e15', '#eda113', '#eda113', '#eda413', '#f0a911', '#f0ad11', '#f0b00e', '#f2b50e', '#f2b90e', '#f5bf0c', '#f5c30c', '#f5c60a', '#f7cb0a', '#f7cf08', '#f7d308', '#fada08', '#fadd05', '#fae105', '#fce703', '#fceb03', '#fff203', '#fff700', '#fffb00', '#ffff00', '#ffff00', '#f6ff00', '#ebfc00', '#e3fc00', '#d9fa00', '#d0fa00', '#c6f700', '#bdf700', '#b4f500', '#acf500', '#a1f200', '#99f200', '#90f000', '#88f000', '#7eed00', '#77ed00', '#6eeb00', '#66eb00', '#5de800', '#55e800', '#4de600', '#45e600', '#3de300', '#35e300', '#2de000', '#25e000', '#1ede00', '#16de00', '#0fdb00', '#07db00', '#00db00', '#00db00', '#03d90a', '#04d612', '#04d419', '#07d122', '#08cf29', '#0acc31', '#0ac937', '#0cc93e', '#0ec746', '#0fc44c', '#0fc251', '#11bf57', '#13bd5c', '#14ba62', '#14b866', '#16b56b', '#17b36f', '#19b074', '#18ad77', '#19ab7a', '#1ba87e', '#1ca883', '#1ca686', '#1da388', '#1ea18b', '#209e8d', '#1f9c90', '#209991', '#20998f', '#209991', '#1e9690', '#1e9692', '#1e9694', '#1e9696', '#1c9294', '#1c9094', '#1c8e94', '#1c8c94', '#1a8791', '#1a8591', '#1a8391', '#187f8f', '#187d8f', '#187b8f', '#18798f', '#17758c', '#17738c', '#17718c', '#176f8c', '#156b8a', '#15698a', '#15678a', '#136287', '#136087', '#135e87', '#135c87', '#115985', '#115785', '#115585', '#115385', '#104f82', '#104d82', '#104b82', '#104982', '#0e4580', '#0e4380', '#0e4180', '#0c3d7d', '#0c3b7d', '#0c397d', '#0c377d', '#0b347a', '#0b327a', '#0b307a', '#0b2e7a', '#0b2c7a'].reverse();
    this.colors["color-ramp-pink2yellowgreen"] = ['#9e1e71', '#9e1e75', '#a1207d', '#a12081', '#a12286', '#a1228a', '#a32490', '#a32494', '#a32498', '#a626a0', '#a626a4', '#a428a6', '#a228a8', '#9e2aa8', '#992aa8', '#952aa8', '#942cab', '#902cab', '#8c2eab', '#892fad', '#8530ad', '#8130ad', '#8033b0', '#7c33b0', '#7833b0', '#7434b0', '#7235b3', '#6f37b3', '#6b37b3', '#693ab5', '#653ab5', '#613ab5', '#5e3cb5', '#5b3db8', '#593fb8', '#553fb8', '#5341ba', '#4f41ba', '#4b41ba', '#4a44bd', '#4644bd', '#4648bd', '#464cbd', '#4953bf', '#4956bf', '#495abf', '#4b61c2', '#4b65c2', '#4e6bc2', '#4e6fc2', '#5175c4', '#5179c4', '#517dc4', '#5484c7', '#5487c7', '#568dc7', '#5792c9', '#5896c9', '#589ac9', '#589ec9', '#5ca5cc', '#5ca9cc', '#5eadcc', '#5fb3cf', '#61b7cf', '#61bbcf', '#64c1d1', '#64c4d1', '#64c8d1', '#66ccd1', '#68d2d4', '#6ad4d2', '#6ad4cf', '#6dd6cd', '#6dd6ca', '#6dd6c6', '#70d6c3', '#71d9c3', '#73d9bf', '#73d9bc', '#77dbbb', '#77dbb8', '#77dbb4', '#7adeb4', '#7adeb1', '#7cdeaf', '#7cdeac', '#7fe0ab', '#7fe0a8', '#7fe0a4', '#84e3a5', '#84e3a2', '#86e3a0', '#86e39d', '#8ae69e', '#8ae69b', '#8ae698', '#8ee898', '#8ee895', '#90e894', '#92eb93', '#96eb94', '#99eb94', '#9ceb94', '#a1ed97', '#a4ed97', '#a9ed9a', '#aef09c', '#b3f09e', '#b5f09e', '#bcf2a2', '#bef2a2', '#c1f2a2', '#c5f2a4', '#caf5a6', '#cef5a9', '#d0f5a9', '#d5f7ac', '#d8f7ac', '#daf7ac', '#def7af', '#e3fab1', '#e6fab4', '#e9fab4', '#edfcb8', '#effcb8', '#f2fcb8', '#f7ffbd', '#faffbd', '#fcffbf', '#feffbf', '#fffebf', '#ffffbf', '#fcfcbb', '#fafab9', '#f6f7b4', '#f4f5b3', '#f1f2af', '#eff0aa', '#eceda8', '#e9eba4', '#e6e8a2', '#e4e69f', '#e1e39a', '#dee098', '#dcde95', '#d7db93', '#d5d98f', '#d2d68b', '#d0d48a', '#cdd186', '#cacf84', '#c7cc81', '#c4c97d', '#c2c77b', '#bfc478', '#bcc277', '#b9bf73', '#b7bd6f', '#b4ba6d', '#b2b86b', '#adb567', '#abb366', '#a8b063', '#a5ad61', '#a3ab5e', '#a0a85b', '#9da65a', '#9aa356', '#98a155', '#959e52', '#939c50', '#8f994e', '#8c964b', '#8a944a', '#879147', '#858f44', '#818c43', '#7f8a41', '#7c8740', '#7a853d', '#77823b', '#75803a', '#717d37', '#6f7a36', '#6d7834', '#6a7531', '#687330', '#65702e', '#636e2d'].reverse();
    this.colors["color-ramp-distance"] = ['#ffc800', '#ffd000', '#ffd900', '#ffe100', '#ffea00', '#fff200', '#fffb00', '#fbff00', '#f2ff00', '#eaff00', '#e1ff00', '#d9ff00', '#d0ff00', '#c8ff00', '#bfff00', '#b7ff00', '#aeff00', '#a6ff00', '#9dff00', '#95ff00', '#8cff00', '#84ff00', '#7bff00', '#73ff00', '#6aff00', '#62ff00', '#59ff00', '#51ff00', '#48ff00', '#40ff00', '#37ff00', '#2fff00', '#26ff00', '#1eff00', '#15ff00', '#0dff00', '#04ff00', '#00ff04', '#00ff0d', '#00ff15', '#00ff1e', '#00ff26', '#00ff2f', '#00ff37', '#00ff40', '#00ff48', '#00ff51', '#00ff59', '#00ff62', '#00ff6a', '#00ff73', '#00ff7b', '#00ff84', '#00ff8c', '#00ff95', '#00ff9d', '#00ffa6', '#00ffae', '#00ffb7', '#00ffbf', '#00ffc8', '#00ffd0', '#00ffd9', '#00ffe1', '#00ffea', '#00fff2', '#00fffb', '#00fbff', '#00f2ff', '#00eaff', '#00e1ff', '#00d9ff', '#00d0ff', '#00c8ff', '#00bfff', '#00b7ff', '#00aeff', '#00a6ff', '#009dff', '#0095ff', '#008cff', '#0084ff', '#007bff', '#0073ff', '#006aff', '#0062ff', '#0059ff', '#0051ff', '#0048ff', '#0040ff', '#0037ff', '#002fff', '#0026ff', '#001eff', '#0015ff', '#000dff', '#0004ff', '#0400ff'].reverse();
    this.colors["color-ramp-green2blue"] = ['#20cc10', '#1dcc10', '#19cc10', '#17cf10', '#12cf0f', '#0fcf0f', '#0fcf12', '#0fd115', '#0fd118', '#0fd11c', '#0fd11f', '#0cd420', '#0cd424', '#0cd427', '#0cd42a', '#0dd62e', '#0dd632', '#0dd635', '#0dd638', '#0bd93b', '#0bd93f', '#0bd942', '#0bd945', '#0bdb4a', '#0bdb4d', '#0bdb50', '#09db52', '#09de57', '#09de5a', '#09de5e', '#09de62', '#09e066', '#09e06a', '#07e06c', '#07e070', '#07e074', '#07e379', '#07e37c', '#07e380', '#07e384', '#07e689', '#05e68c', '#05e690', '#05e693', '#05e898', '#05e89c', '#05e8a0', '#05e8a4', '#03eba9', '#03ebad', '#03ebb1', '#03ebb5', '#03edba', '#03edbe', '#03edc2', '#00edc6', '#00f0cc', '#00f0d0', '#00f0d4', '#00f0d8', '#00f2de', '#00f2e2', '#00f2e6', '#00f2ea', '#00f2ee', '#00f2f2', '#00f2f2', '#00eef2', '#00eaf2', '#00e6f2', '#00e0f0', '#00dcf0', '#00d8f0', '#00d4f0', '#00d0f0', '#00ccf0', '#00c8f0', '#00c4f0', '#00beed', '#00baed', '#03b6ed', '#03b2ed', '#03afed', '#03abed', '#03a7ed', '#03a1eb', '#039eeb', '#039aeb', '#0396eb', '#0392eb', '#038eeb', '#038aeb', '#0386eb', '#0381e8', '#037de8', '#0379e8', '#0375e8', '#0372e8', '#036ee8', '#036ae8', '#0366e8', '#0361e6', '#035ee6', '#035ae6', '#0356e6', '#0352e6', '#034ee6', '#034be6', '#0346e3', '#0342e3', '#033ee3', '#033be3', '#0337e3', '#0333e3', '#0330e3', '#032ce3', '#0328e3', '#0324e3', '#0321e3'].reverse();
    this.colors["color-ramp-red2green1"] = ['#ba1414', '#ba1917', '#bd1e18', '#bd231b', '#bf271c', '#bf2c1f', '#c23121', '#c23623', '#c23a25', '#c43c27', '#c4412a', '#c7462c', '#c74a2e', '#c94f30', '#c95332', '#c95734', '#cc5c37', '#cc6039', '#cf663c', '#cf693e', '#d16e41', '#d17243', '#d17645', '#d47c48', '#d47f4a', '#d6824d', '#d6854f', '#d98b53', '#d98e54', '#d99157', '#db965a', '#db995c', '#de9f60', '#dea262', '#e0a765', '#e0a967', '#e3af6b', '#e3b26d', '#e3b56f', '#e6ba73', '#e6bd75', '#e8bf79', '#e8c27b', '#ebc77f', '#ebc981', '#ebcc84', '#edd087', '#edd28a', '#f0d78d', '#f0da90', '#f2de94', '#f2e096', '#f2e299', '#f5e69d', '#f5e89f', '#f7eca3', '#f7eea6', '#faf1aa', '#faf2ad', '#faf4af', '#fcf7b3', '#fcf8b6', '#fffdba', '#fffebd', '#ffffbf', '#ffffbf', '#fbfcbb', '#f8fab6', '#f7fab4', '#f2f7af', '#eff5ab', '#ebf2a7', '#e7f0a3', '#e3ed9f', '#e2ed9c', '#dfeb99', '#dae894', '#d6e691', '#d2e38d', '#cde089', '#cbe086', '#c7de83', '#c2db7f', '#bed97b', '#bad678', '#b6d474', '#b4d473', '#afd16f', '#abcf6c', '#a6cc68', '#a1c964', '#9dc762', '#9cc75f', '#97c45c', '#93c259', '#8ebf56', '#8abd53', '#85ba50', '#82ba4e', '#7eb84c', '#79b548', '#75b345', '#70b043', '#6bad40', '#69ad3e', '#64ab3c', '#60a839', '#5ca637', '#57a334', '#53a132', '#52a130', '#4e9e2e', '#499c2b', '#459929', '#419627', '#3d9425', '#3a9423', '#369122'].reverse();
    this.colors["color-ramp-red2green"] = ['#f50000', '#f50400', '#f50800', '#f50c00', '#f51000', '#f51400', '#f51900', '#f51d00', '#f52100', '#f52500', '#f52900', '#f52d00', '#f53100', '#f53500', '#f53900', '#f53d00', '#f54100', '#f54500', '#f54a00', '#f54e00', '#f55200', '#f55600', '#f55a00', '#f55e00', '#f56200', '#f56600', '#f56a00', '#f56e00', '#f57200', '#f57600', '#f57b00', '#f57f00', '#f58300', '#f58700', '#f58b00', '#f58f00', '#f59300', '#f59700', '#f59b00', '#f59f00', '#f5a300', '#f5a700', '#f5ac00', '#f5b000', '#f5b400', '#f5b800', '#f5bc00', '#f5c000', '#f5c400', '#f5c800', '#f5cc00', '#f5d000', '#f5d400', '#f5d800', '#f5dd00', '#f5e100', '#f5e500', '#f5e900', '#f5ed00', '#f5f100', '#f5f500', '#f5f500', '#f1f500', '#edf500', '#e9f500', '#e5f500', '#e1f500', '#dcf500', '#d8f500', '#d4f500', '#d0f500', '#ccf500', '#c8f500', '#c4f500', '#c0f500', '#bcf500', '#b8f500', '#b4f500', '#b0f500', '#acf500', '#a7f500', '#a3f500', '#9ff500', '#9bf500', '#97f500', '#93f500', '#8ff500', '#8bf500', '#87f500', '#83f500', '#7ff500', '#7bf500', '#76f500', '#72f500', '#6ef500', '#6af500', '#66f500', '#62f500', '#5ef500', '#5af500', '#56f500', '#52f500', '#4ef500', '#4af500', '#45f500', '#41f500', '#3df500', '#39f500', '#35f500', '#31f500', '#2df500', '#29f500', '#25f500', '#21f500', '#1df500', '#19f500', '#14f500', '#10f500', '#0cf500', '#08f500', '#04f500', '#00f500'].reverse();
    this.colors["color-ramp-patrialspectrum2"] = ['#734d2a', '#754f2b', '#78502b', '#7a532c', '#7d552d', '#80562d', '#82582d', '#855a2e', '#875b2e', '#8a5e2f', '#8c5f30', '#8f612f', '#916230', '#946431', '#966530', '#996931', '#9c6b32', '#9e6b31', '#a16d32', '#a36e31', '#a67031', '#a87332', '#ab7432', '#ad7632', '#b07833', '#b37932', '#b57a32', '#b87e33', '#ba7f32', '#bd8133', '#bf8334', '#c28432', '#c48533', '#c78734', '#c98834', '#c98834', '#c98c36', '#cc8f39', '#cc923b', '#cf953e', '#cf9840', '#d19b43', '#d19e45', '#d4a148', '#d4a44a', '#d4a54c', '#d6a94f', '#d6aa51', '#d9af54', '#d9b257', '#dbb45a', '#dbb75c', '#dbb85e', '#debd62', '#debd64', '#e0c267', '#e0c269', '#e3c76d', '#e3c86f', '#e6cd73', '#e6cf75', '#e6d078', '#e8d47b', '#e8d47e', '#ebd981', '#ebda84', '#edde87', '#edde8a', '#f0e38d', '#f0e390', '#f0e593', '#f2e796', '#f2e999', '#f5ee9d', '#f5ee9f', '#f7f1a3', '#f7f2a6', '#f7f3a8', '#faf6ad', '#faf7af', '#fcfab3', '#fcfbb6', '#fffeba', '#ffffbd', '#ffffbf', '#ffffbf', '#f8fcbb', '#f3fcb8', '#ecfab6', '#e5f7b2', '#dff7af', '#d7f5ab', '#d2f5a9', '#caf2a7', '#c2f0a3', '#bbf0a1', '#b2ed9c', '#a9eb99', '#a4eb99', '#9ae894', '#91e691', '#8fe694', '#8be397', '#89e09a', '#86e09e', '#83dea1', '#81dea6', '#7ddba9', '#7bd9ad', '#7ad9b3', '#75d6b6', '#73d4ba', '#70d4c0', '#6fd1c4', '#6ccfc8', '#6acfcf', '#66c5cc', '#64becc', '#63b5c9', '#5fabc7', '#5ea4c7', '#5a9ac4', '#5790c2', '#5789c2', '#547fbf', '#5275bd', '#4f6dbd', '#4d62ba', '#4c5ab8', '#4a51b8', '#4646b5', '#4c45b5', '#5142b3', '#5741b0', '#5d3fb0', '#5c3fb0', '#5a3cad', '#5b3cab', '#5b39a8', '#5a37a6', '#5a36a3', '#5b34a3', '#5b32a1', '#5b319e', '#5a2e9c', '#5a2c99', '#592a96', '#592994', '#592791', '#58258f', '#58248c', '#58238a', '#572087', '#592087', '#591f85', '#581d82', '#581c80', '#571a7d', '#56187a', '#561878', '#551675', '#551573', '#541370', '#54136e', '#53116b', '#54106b', '#541069', '#530e66', '#520d63', '#520d61'].reverse();
    this.colors["color-ramp-patrialspectrum1"] = ['#872626', '#8a2725', '#8c2926', '#8f2a25', '#912d26', '#942d25', '#962f26', '#993025', '#9c3224', '#9e3525', '#a13623', '#a33924', '#a63b23', '#a83c24', '#ab3e22', '#ad3f21', '#b04221', '#b34520', '#b54821', '#b84a1f', '#ba4e1f', '#bd511e', '#bf501c', '#c2541d', '#c4571c', '#c75b1c', '#c95d1a', '#cc611a', '#cf6519', '#d16817', '#d46917', '#d66c15', '#d97115', '#db7414', '#de7914', '#e07c12', '#e38110', '#e68610', '#e8860e', '#eb8b0e', '#ed8f0c', '#f0950c', '#f0950c', '#f0960e', '#f09a11', '#f09b13', '#f09c16', '#f0a118', '#f2a31b', '#f2a41d', '#f2a81f', '#f2a922', '#f2ad24', '#f2ae27', '#f2af29', '#f2b32c', '#f2b42e', '#f2b530', '#f5bb34', '#f5bc36', '#f5bd39', '#f5c03b', '#f5c13d', '#f5c23f', '#f5c542', '#f5c644', '#f5c747', '#f5ca49', '#f7cc4d', '#f7d04f', '#f7d051', '#f7d154', '#f7d456', '#f7d559', '#f7d55b', '#f7d85e', '#f7d960', '#f7d963', '#fadf67', '#fadf69', '#fae06c', '#fae36e', '#fae371', '#fae373', '#fae676', '#fae678', '#fae77b', '#fae97d', '#fcec80', '#fcee83', '#fcee85', '#fcef88', '#fcf18a', '#fcf18d', '#fcf18f', '#fcf392', '#fcf394', '#fcf497', '#fff89c', '#fff99e', '#fff9a1', '#fffaa3', '#fffba6', '#fffba8', '#fffcab', '#fffcad', '#fffeb0', '#fffeb2', '#fffeb5', '#ffffb8', '#ffffba', '#ffffbd', '#ffffbf', '#ffffbf', '#f9fcbb', '#f5fcbb', '#f0fab6', '#ecfab6', '#e6f7b2', '#e1f7af', '#dcf5ae', '#d7f5ab', '#d1f2a9', '#cdf2a7', '#c7f0a6', '#c2f0a3', '#baed9f', '#b6ed9f', '#afeb9b', '#abeb9b', '#a3e897', '#9de894', '#97e693', '#91e691', '#8fe394', '#8de395', '#8be098', '#89e09a', '#85de9b', '#85dea0', '#81dba0', '#81dba5', '#7ed9a7', '#7bd9aa', '#7ad6ac', '#78d6b0', '#77d4b3', '#74d4b7', '#73d1b9', '#71d1be', '#6ecfc0', '#6ecfc5', '#6accc7', '#6acccc', '#66c4c9', '#64bfc9', '#63b8c7', '#62b3c7', '#60abc4', '#5ea5c4', '#5d9fc2', '#5b99c2', '#5890bf', '#588bbf', '#5584bd', '#557fbd', '#5276ba', '#5070ba', '#4f6ab8', '#4d63b8', '#4c5cb5', '#4b55b5', '#4b50b5', '#4b50b5', '#484db3', '#464ab0', '#4347ad', '#4143ab', '#4042a8', '#3d3fa6', '#3b3ba3', '#3a3aa1', '#37379e', '#37359c', '#363499', '#353196', '#333094', '#322f91', '#312c8f', '#2f2a8c', '#2e298a', '#2e2787', '#2b2585', '#2c2482', '#2a2380', '#28207d', '#27207a'].reverse();
    this.colors["color-ramp-slope"] = ['#38a800', '#3cab00', '#3fad00', '#43b000', '#46b000', '#4bb300', '#4eb500', '#53b800', '#57ba00', '#5bbd00', '#60bf00', '#63bf00', '#67c200', '#6cc400', '#71c700', '#75c900', '#7acc00', '#80cf00', '#83cf00', '#88d100', '#8dd400', '#92d600', '#98d900', '#9ddb00', '#a1db00', '#a7de00', '#ace000', '#b2e300', '#b8e600', '#bde800', '#c4eb00', '#c8eb00', '#cded00', '#d4f000', '#daf200', '#e1f500', '#e7f700', '#eefa00', '#f2fa00', '#f8fc00', '#ffff00', '#ffff00', '#fffb00', '#fff700', '#fff200', '#ffee00', '#ffea00', '#ffe600', '#ffe100', '#ffdd00', '#ffd900', '#ffd500', '#ffd000', '#ffcc00', '#ffc800', '#ffc400', '#ffbf00', '#ffbb00', '#ffb700', '#ffb300', '#ffae00', '#ffaa00', '#ffa600', '#ffa200', '#ff9d00', '#ff9900', '#ff9500', '#ff9100', '#ff8c00', '#ff8800', '#ff8400', '#ff8000', '#ff7b00', '#ff7700', '#ff7300', '#ff6f00', '#ff6a00', '#ff6600', '#ff6200', '#ff5e00', '#ff5900', '#ff5500', '#ff5100', '#ff4d00', '#ff4800', '#ff4400', '#ff4000', '#ff3c00', '#ff3700', '#ff3300', '#ff2f00', '#ff2b00', '#ff2600', '#ff2200', '#ff1e00', '#ff1a00', '#ff1500', '#ff1100', '#ff0d00', '#ff0900', '#ff0400', '#ff0000'].reverse();
    this.colors["color-ramp-prediction"] = ['#2892c7', '#2895c7', '#2897c7', '#289ac7', '#2b9fc9', '#2ba1c9', '#2ba4c9', '#2ba7c9', '#2ba9c9', '#2bacc9', '#2bafc9', '#2db4cc', '#2db7cc', '#2db9cc', '#2dbccc', '#2dbfcc', '#2dc1cc', '#30c7cf', '#30cacf', '#30cccf', '#30cfcf', '#30cfcc', '#30cfca', '#30cfc7', '#32d1c6', '#32d1c4', '#32d1c1', '#32d1be', '#32d1bc', '#32d1b9', '#32d1b6', '#35d4b7', '#35d4b4', '#35d4b2', '#35d4af', '#35d4ac', '#35d4aa', '#37d6a9', '#37d6a6', '#37d6a4', '#37d6a1', '#37d69e', '#37d69c', '#37d699', '#3bd99a', '#3bd997', '#3bd994', '#3bd992', '#3bd98f', '#3bd98c', '#3bd98a', '#3ddb89', '#3ddb87', '#3ddb84', '#3ddb81', '#3ddb7f', '#3ddb7c', '#3ddb7a', '#40de7a', '#40de78', '#40de75', '#40de72', '#40de70', '#40de6d', '#43e06d', '#43e06a', '#43e067', '#43e065', '#43e062', '#43e060', '#43e05d', '#46e35e', '#46e35b', '#46e359', '#46e356', '#46e353', '#46e351', '#46e34e', '#4ae64f', '#4ae64d', '#4ae64a', '#4de64a', '#4fe64a', '#52e64a', '#57e84c', '#59e84c', '#5ce84c', '#5fe84c', '#61e84c', '#64e84c', '#66e84c', '#6deb50', '#6feb50', '#72eb50', '#74eb50', '#77eb50', '#79eb50', '#7ceb50', '#81ed53', '#84ed53', '#86ed53', '#89ed53', '#8bed53', '#8eed53', '#90ed53', '#97f057', '#99f057', '#9cf057', '#9ef057', '#a1f057', '#a3f057', '#a8f259', '#abf259', '#adf259', '#b0f259', '#b2f259', '#b5f259', '#b7f259', '#bdf55d', '#c0f55d', '#c2f55d', '#c5f55d', '#c7f55d', '#caf55d', '#cdf55d', '#d1f760', '#d4f760', '#d6f760', '#d9f760', '#dbf760', '#def760', '#e4fa64', '#e6fa64', '#e9fa64', '#ebfa64', '#eefa64', '#f0fa64', '#f3fa64', '#f5fa64', '#f8fa64', '#fafa64', '#fafa64', '#f3fa64', '#ebfa61', '#e3fa61', '#dbfa61', '#d3fa5f', '#ccfa5f', '#c1f75e', '#b9f75b', '#b1f75b', '#a9f75b', '#a0f759', '#98f759', '#90f759', '#86f756', '#7ef756', '#76f756', '#6df754', '#65f754', '#5cf554', '#51f551', '#51f559', '#51f561', '#4ff568', '#4ff570', '#4ff578', '#4cf57f', '#4cf587', '#4cf590', '#49f596', '#49f59f', '#49f5a8', '#46f2ad', '#46f2b6', '#46f2be', '#43f2c6', '#43f2cf', '#43f2d8', '#41f2e0', '#41f2e9', '#41f2f2', '#3fe9f2', '#3fe0f2', '#3fd7f2', '#3dcef2', '#3cc3f0', '#3cbaf0', '#39b0f0', '#39a7f0', '#399ef0', '#3894f0', '#388bf0', '#3580f0', '#3576f0', '#356df0', '#3362f0', '#3359f0', '#324eed', '#2f42ed', '#2f39ed', '#2f2fed', '#362ded', '#402ded', '#492ded', '#522bed', '#5b2bed', '#652bed', '#6d28ed', '#7728ed', '#8128ed', '#8826eb', '#9226eb', '#9c26eb', '#a523eb', '#af23eb', '#b923eb', '#c321eb', '#cd21eb', '#d721eb', '#e11eeb', '#eb1eeb', '#eb1ee1', '#eb1dd6', '#e81cc9', '#e81cbf', '#e819b4', '#e819aa', '#e819a0', '#e81794', '#e8178a', '#e8177f', '#e81574', '#e81569', '#e8155f', '#e81252', '#e81248', '#e8123d', '#e81031', '#e81026', '#e8101b', '#e81010'].reverse();
    this.colors["color-ramp-surface"] = ['#709959', '#749c5b', '#769e5c', '#7aa15f', '#7ba15f', '#7ea360', '#82a662', '#85a865', '#89ab67', '#8cad68', '#8fb06a', '#91b06c', '#95b36e', '#98b56f', '#9bb871', '#9fba73', '#a3bd75', '#a6bf76', '#a7bf76', '#abc27a', '#aec47c', '#b2c77e', '#b5c97f', '#b9cc81', '#becf84', '#bfcf84', '#c2d186', '#c6d488', '#cad68b', '#ced98d', '#d1db8f', '#d5de91', '#d6de92', '#dae094', '#dee396', '#e2e698', '#e5e89c', '#eaeb9e', '#eded9f', '#edec9f', '#f0eda1', '#f2eea2', '#f2eea2', '#f2ec9f', '#f2eb9f', '#f2ea9e', '#f2e89b', '#f2e699', '#f2e599', '#f2e396', '#f2e194', '#f2df91', '#f2dd91', '#f2db8e', '#f2d98c', '#f2d78c', '#f2d48a', '#f2d288', '#f2cf85', '#f2ce85', '#f2ce85', '#f0ca84', '#f0c987', '#edc585', '#ebc284', '#e8be84', '#e8bd84', '#e6bb85', '#e3b784', '#e0b382', '#e0b284', '#deaf83', '#dbab81', '#d9a982', '#d9a882', '#d6a683', '#d4a382', '#d19f80', '#d19f81', '#cf9c80', '#cc987e', '#c9967f', '#c9957f', '#c7947f', '#c4907d', '#c28e7c', '#c28c7c', '#c28c7c', '#c2947e', '#c49b80', '#c4a181', '#c7aa83', '#c7b085', '#c9b787', '#c9bd88', '#c9c388', '#cccb8d', '#c8cc8d', '#c6cf90', '#c1cf93', '#bed194', '#bad197', '#b5d197', '#b3d49b', '#afd49b', '#add69f', '#a9d69f', '#a6d6a0', '#a3d9a3', '#a5d9a9', '#a7dbae', '#a8dbb4', '#addebd', '#addec1', '#afdec6', '#b1e0cb', '#b3e0d0', '#b6e3d7', '#b8e3db', '#bbe6e2', '#bde6e5', '#bde3e6', '#c1e2e8', '#c3dfe8', '#c5dfeb', '#c8ddeb', '#cadced', '#ccdaed', '#ccd7ed', '#d1d9f0', '#d1d7f0', '#d5d8f2', '#d5d5f2', '#d9d7f2', '#dedaf5', '#e2dcf5', '#e8e1f7', '#eae1f7', '#f0e6fa', '#f2e6fa', '#f4e8fa', '#f7eafc', '#f9edfc', '#fef0ff', '#fff2ff', '#fff2fe'].reverse();
    this.colors["color-ramp-spectrumfull"] = ['#ff0000', '#ff0400', '#ff0900', '#ff0d00', '#ff1100', '#ff1500', '#ff1a00', '#ff1e00', '#ff2200', '#ff2600', '#ff2b00', '#ff2f00', '#ff3300', '#ff3700', '#ff3c00', '#ff4000', '#ff4400', '#ff4800', '#ff4d00', '#ff5100', '#ff5500', '#ff5900', '#ff5e00', '#ff6200', '#ff6600', '#ff6a00', '#ff6f00', '#ff7300', '#ff7700', '#ff7b00', '#ff8000', '#ff8400', '#ff8800', '#ff8c00', '#ff9100', '#ff9500', '#ff9900', '#ff9d00', '#ffa200', '#ffa600', '#ffaa00', '#ffae00', '#ffb300', '#ffb700', '#ffbb00', '#ffbf00', '#ffc400', '#ffc800', '#ffcc00', '#ffd000', '#ffd500', '#ffd900', '#ffdd00', '#ffe100', '#ffe600', '#ffea00', '#ffee00', '#fff200', '#fff700', '#fffb00', '#ffff00', '#ffff00', '#f6ff00', '#eeff00', '#e5ff00', '#ddff00', '#d4ff00', '#ccff00', '#c4ff00', '#bbff00', '#b3ff00', '#aaff00', '#a2ff00', '#99ff00', '#91ff00', '#88ff00', '#80ff00', '#77ff00', '#6fff00', '#66ff00', '#5eff00', '#55ff00', '#4dff00', '#44ff00', '#3cff00', '#33ff00', '#2bff00', '#22ff00', '#1aff00', '#11ff00', '#09ff00', '#00ff00', '#00ff08', '#00ff11', '#00ff1a', '#00ff22', '#00ff2a', '#00ff33', '#00ff3c', '#00ff44', '#00ff4c', '#00ff55', '#00ff5e', '#00ff66', '#00ff6e', '#00ff77', '#00ff80', '#00ff88', '#00ff91', '#00ff99', '#00ffa2', '#00ffaa', '#00ffb3', '#00ffbb', '#00ffc4', '#00ffcc', '#00ffd5', '#00ffdd', '#00ffe5', '#00ffee', '#00fff7', '#00ffff', '#00ffff', '#00fbff', '#00f7ff', '#00f2ff', '#00eeff', '#00eaff', '#00e5ff', '#00e1ff', '#00ddff', '#00d9ff', '#00d5ff', '#00d0ff', '#00ccff', '#00c8ff', '#00c4ff', '#00bfff', '#00bbff', '#00b7ff', '#00b3ff', '#00aeff', '#00aaff', '#00a6ff', '#00a2ff', '#009dff', '#0099ff', '#0095ff', '#0091ff', '#008cff', '#0088ff', '#0084ff', '#0080ff', '#007bff', '#0077ff', '#0073ff', '#006eff', '#006aff', '#0066ff', '#0062ff', '#005eff', '#0059ff', '#0055ff', '#0051ff', '#004cff', '#0048ff', '#0044ff', '#0040ff', '#003cff', '#0037ff', '#0033ff', '#002fff', '#002aff', '#0026ff', '#0022ff', '#001eff', '#001aff', '#0015ff', '#0011ff', '#000dff', '#0008ff', '#0004ff', '#0000ff'].reverse();
    this.colors["color-ramp-elevation1"] = ['#aff0ea', '#aff0e6', '#aff0e3', '#b1f2e2', '#b1f2de', '#aff2da', '#aff2d7', '#aff2d4', '#aff2d0', '#b1f5cf', '#b1f5cc', '#b1f5c9', '#b1f5c5', '#b1f5c2', '#b2f7c0', '#aff7ba', '#aff7b6', '#aff7b3', '#aff7af', '#b3f7af', '#b9fab1', '#bcfab1', '#c0fab1', '#c4fab1', '#c7fab1', '#c9faaf', '#cefcb0', '#d2fcb0', '#d6fcb0', '#dafcb0', '#defcb0', '#e4ffb2', '#e8ffb2', '#ecffb2', '#f0ffb2', '#f3ffb2', '#f7ffb2', '#fbffb2', '#ffffb2', '#ffffb2', '#f8fcab', '#f6faaa', '#eff7a3', '#ecf59d', '#e4f296', '#def095', '#daed8e', '#d2eb88', '#d0e887', '#c8e681', '#bfe37b', '#bce079', '#b4de74', '#aadb6d', '#a6d968', '#9ed666', '#9bd461', '#91d15c', '#89cf5b', '#85cc56', '#7bc950', '#77c74c', '#6fc44b', '#65c246', '#61bf41', '#59bd40', '#55ba3c', '#4ab837', '#43b536', '#3fb332', '#34b02e', '#30ad29', '#29ab29', '#25a82b', '#21a628', '#21a32e', '#1da12a', '#199e2d', '#169c31', '#169930', '#129633', '#0f9437', '#0e9135', '#0b8f39', '#088c36', '#088a3c', '#058740', '#03853d', '#008241', '#008040', '#008040', '#00823d', '#00853a', '#008736', '#008a33', '#008c2f', '#008f2b', '#008f26', '#009122', '#00941e', '#009619', '#009914', '#009c10', '#009e0b', '#02a107', '#02a302', '#07a602', '#0da802', '#13ab02', '#19ad02', '#1fb002', '#25b002', '#2bb302', '#32b502', '#39b802', '#3fba02', '#47bd02', '#4ebf02', '#55c202', '#5dc402', '#65c702', '#6cc902', '#75cc02', '#7dcf02', '#84cf02', '#8cd102', '#95d402', '#9ed603', '#a7d903', '#b0db03', '#b9de03', '#c2e003', '#cde303', '#d7e603', '#e0e803', '#ebeb03', '#ede503', '#f0e003', '#f0d803', '#f2d203', '#f5cd03', '#f7c603', '#fac003', '#fcba03', '#fcba03', '#fab403', '#f7ae03', '#f5a803', '#f2a203', '#f09d03', '#ed9b03', '#eb9603', '#e89003', '#e68b03', '#e38603', '#e08003', '#de7b03', '#db7500', '#d97000', '#d66b00', '#d46a00', '#d16500', '#cf6100', '#cc5c00', '#c95700', '#c75300', '#c44e00', '#c24a00', '#bf4600', '#bd4200', '#ba4100', '#b83d00', '#b53900', '#b33600', '#b03200', '#ad2e00', '#ab2b00', '#a82700', '#a62400', '#a32100', '#a12000', '#9e1d00', '#9c1a00', '#991700', '#961400', '#941100', '#910f00', '#8f0c00', '#8c0900', '#8a0700', '#870700', '#850400', '#820200', '#800000', '#800000', '#800402', '#7d0601', '#7d0902', '#7a0a02', '#7a0e04', '#780f04', '#781205', '#781405', '#751706', '#751806', '#731b07', '#731d08', '#731f08', '#702109', '#702309', '#6e250a', '#6e260a', '#6b270a', '#6b290a', '#6b2b0c', '#692c0c', '#692f0d', '#69300d', '#69300d', '#6b310f', '#6b3211', '#6e3314', '#6e3516', '#703619', '#73391c', '#73391e', '#753b21', '#753c23', '#783f27', '#7a402a', '#7a422c', '#7d4430', '#7d4632', '#804836', '#824a39', '#824c3c', '#854f40', '#855142', '#875346', '#8a574b', '#8a594d', '#8c5c51', '#8c5d54', '#8f6259', '#91655d', '#916760', '#946b64', '#946d67', '#96716c', '#997571', '#997874', '#9c7d7a', '#9c7f7d', '#9e8381', '#a18987', '#a18b8a', '#a3908f', '#a39392', '#a69999', '#a89e9e', '#a8a2a1', '#aba8a8', '#ababab', '#ababab', '#adadad', '#b0b0b0', '#b3b3b3', '#b3b3b3', '#b5b5b5', '#b8b8b8', '#bababa', '#bdbdbd', '#bfbfbf', '#c1c2c0', '#c3c4c2', '#c3c4c2', '#c5c7c5', '#c7c9c7', '#caccca', '#cdcfcd', '#cfd1cf', '#d2d4d3', '#d3d6d5', '#d3d6d5', '#d6d9d8', '#d8dbdb', '#dbdede', '#dddfe0', '#e0e2e3', '#e3e5e6', '#e5e6e8', '#e5e6e8', '#e8e9eb', '#eaeaed', '#eeedf0', '#f0eff2', '#f3f2f5', '#f6f4f7', '#f9f7fa', '#f9f7fa', '#fcf9fc', '#fffcff'].reverse();
    this.colors["color-ramp-elevation2"] = ['#77dbd3', '#78dbce', '#7adecc', '#7cdec7', '#7fe0c5', '#7fe0c0', '#82e0bc', '#84e3ba', '#86e3b6', '#88e3b3', '#8ae6b0', '#8de6ad', '#90e8ac', '#90e8a7', '#92e8a5', '#94eba3', '#96eba0', '#99eb9e', '#9aed9c', '#9fed9c', '#a8f0a1', '#abf0a1', '#b1f0a3', '#b6f2a4', '#bcf2a7', '#c1f2a9', '#c7f5ab', '#cdf5ae', '#d3f7b2', '#d7f7b2', '#dbf7b4', '#e1fab6', '#e6fab9', '#e9fabb', '#eefcbd', '#f2fcc0', '#f8ffc4', '#fbffc4', '#feffc7', '#fffdc7', '#ffffc7', '#ffffc4', '#ffffc2', '#ffffbf', '#ffffbd', '#ffffba', '#ffffb8', '#ffffb5', '#ffffb2', '#ffffb0', '#ffffad', '#ffffab', '#ffffa8', '#ffffa6', '#ffffa3', '#ffffa1', '#ffff9e', '#ffff9c', '#ffff99', '#ffff96', '#ffff94', '#ffff91', '#ffff8f', '#ffff8c', '#ffff8a', '#ffff87', '#ffff85', '#ffff82', '#ffff7f', '#ffff7f', '#fcfa7e', '#faf67f', '#f7f17e', '#f5ed80', '#f2e87e', '#f0e57f', '#ede07d', '#ebdd7f', '#e8da7e', '#e6d67c', '#e3d27d', '#e0cd7b', '#deca7c', '#dbc67b', '#d9c37a', '#d9c37a', '#d6bf75', '#d4bc73', '#d1b86f', '#cfb66c', '#ccb26a', '#c9af66', '#c7ac63', '#c4a860', '#c2a55d', '#bfa25a', '#bd9e57', '#ba9b54', '#b89a53', '#b5954f', '#b3934d', '#b0904a', '#ad8b47', '#ab8944', '#a88641', '#a6823f', '#a3803e', '#a17d3b', '#9e7939', '#9c7736', '#997434', '#966f31', '#946e30', '#916b2d', '#8f682c', '#8c652a', '#8a6328', '#876026', '#876026', '#876a27', '#8a6d29', '#8a772b', '#8a812c', '#8c832e', '#8c8c30', '#8c8c31', '#868f34', '#7d8f35', '#7d8f36', '#769138', '#6e913a', '#6f913c', '#69943e', '#6a9440', '#629441', '#5c9644', '#5d9645', '#569647', '#519949', '#53994b', '#4c994c', '#509c50', '#519c59', '#539c61', '#569e64', '#579e6c', '#5aa177', '#5ca177', '#5da17f', '#60a381', '#62a389', '#64a390', '#67a693', '#69a69a', '#6aa6a0', '#6da8a2', '#6fa8a8', '#71a8a8', '#74a6ab', '#76a0ab', '#77a1ab', '#7b9ead', '#7d9aad', '#7e9aad', '#8299b0', '#849ab0', '#8697b0', '#8a96b3', '#8c97b3', '#8d95b3', '#9194b5', '#9396b5', '#9494b5', '#9696b5', '#9696b5', '#9796b5', '#9996b5', '#9a96b5', '#9b96b5', '#9c96b5', '#9d96b5', '#9e96b5', '#9f96b5', '#a096b5', '#a196b5', '#a296b5', '#a396b5', '#a496b5', '#a596b5', '#a696b5', '#a796b5', '#a896b5', '#a996b5', '#aa96b5', '#ab96b5', '#ac96b5', '#ad96b5', '#ae96b5', '#af96b5', '#b096b5', '#b196b5', '#b296b5', '#b396b5', '#b496b5', '#b596b5', '#b596b5', '#b89ab8', '#ba9cba', '#bda1bd', '#bfa3bf', '#c2a7c2', '#c4a8c4', '#c7adc7', '#c9b1c9', '#ccb3cc', '#cfb8cf', '#d1bad1', '#d4bed4', '#d6c0d6', '#d9c5d9', '#dbcadb', '#decdde', '#e0d0e0', '#e3d3e3', '#e6d8e6', '#e8dae8', '#ebdfeb', '#ede1ed', '#f0e7f0', '#f2eaf2', '#f5edf5', '#f7f2f7', '#faf5fa', '#fcf9fc', '#fffcff'].reverse();
}

ColorRamp.prototype.getColorName = function (value) {
    if (!value) return null;
    for (var colorName in this.colors) {
        if (_.isEqual(this.colors[colorName], value)) return colorName;
    }
};

ColorRamp.prototype.getColor = function (name) {
    return this.colors[name];
};

var colorRamp = new ColorRamp();
var heatColorRamp = new HeatColorRamp();

var Constants = {
    domain: 'http://geohey.com',

    tileHost: 'http://{s}.geohey.com',

    uri: '/s/dataviz/',

    utfGridSize: 256,

    utfGridRes: 4,

    mapOriginX: -20037508.342784,

    mapOriginY: 20037508.342784,

    colorRamp: colorRamp,

    defaultColorRamp: colorRamp.colors['color-ramp-red'],

    defaultColorRampName: 'color-ramp-red',

    heatColorRamp: heatColorRamp,

    defaultHeatColor: heatColorRamp.colors['color-ramp-heat-blue2red'],

    defaultHeatColorName: 'color-ramp-heat-blue2red',

    fullColorRamp: colorRamp.colors['color-ramp-spectrumfull'],

    geoheyServerCluster: ['s1', 's2', 's3', 's4', 's5', 's6', 's7', 's8'],

    defaultMapStatus: {
        center: [11679530.428552564, 4015909.814808646],
        resolution: 9783.9396205
    },

    defaultMap: {
        uid: 'auto',
        type: 'online'
    },

    defaultLegendTitle: '图例',
    defaultLegendOrder: 'desc',

    configTypes: {
        MARKER_SIMPLE: 'marker-simple',
        MARKER_INTENSITY: 'marker-intensity',
        MARKER_HEAT: 'marker-heat',
        MARKER_CHOROPLETH: 'marker-choropleth',
        MARKER_CATEGORY: 'marker-category',
        MARKER_BUBBLE: 'marker-bubble',
        MARKER_FLUID: 'marker-fluid',
        POLYGON_SIMPLE: 'polygon-simple',
        POLYGON_CHOROPLETH: 'polygon-choropleth',
        POLYGON_CATEGORY: 'polygon-category',
        POLYLINE_SIMPLE: 'polyline-simple',
        POLYLINE_CHOROPLETH: 'polyline-choropleth',
        POLYLINE_CATEGORY: 'polyline-category'
    },

    colors: ['#00b050', '#0070c0', '#c00000', '#7030a0', '#ffc000', '#56ffa0', '#5fbaff', '#ff6962', '#b45dff', '#ffd677', '#00b3ba', '#0500c5', '#a26866', '#fc36c7', '#ff6a10', '#b1fcff', '#5d8bff', '#b59493', '#f490c6', '#ff9b5e', '#24ff00', '#00fff6', '#f0ff00', '#ffffff', '#000000'],
    opacities: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
    lineWidths: [0, 0.1, 0.3, 0.5, 0.8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    markerSizes: [0.1, 0.2, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 24, 28, 32, 35, 40],
    bubbleSizes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],

    labelFonts: [{ alias: '雅黑', name: 'Microsoft YaHei Regular' }, { alias: '楷体', name: 'KaiTi Regular' }, { alias: '宋体', name: 'SimSun Regular' }, { alias: '隶书', name: 'LiSu Regular' }],

    labelSizes: [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24],

    bucketTypes: [{ alias: '自然分段', name: 'naturalbreaks' }, { alias: '四分位法', name: 'quantiles' }, { alias: 'Ht-Index', name: 'ht-index' }, { alias: '平均分段', name: 'equalinterval' }, { alias: '手动分段', name: 'manual' }],

    blendingModeTypes: [{ alias: '正常', name: 'src-over' }, { alias: '滤色', name: 'screen' }, { alias: '变亮', name: 'color-dodge' }, { alias: '叠加', name: 'plus' }, { alias: '深色', name: 'multiply' }, { alias: '变暗', name: 'darken' }, { alias: '柔光', name: 'soft-light' }, { alias: '强光', name: 'hard-light' }],

    defaultBlendingMode: 'src-over',

    bucketCounts: [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20],

    heatSizes: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 38, 42, 46, 50, 60, 70, 80],

    timeSegments: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 50, 80, 100, 150, 200, 300],
    timeDurations: [0.1, 0.2, 0.3, 0.5, 0.8, 1, 1.2, 1.5, 1.8, 2, 2.5, 3],
    defaultTimeSegment: 5,
    defaultTimeDuration: 1,

    defaultMarkerColor: '#c00000',
    defaultMarkerSize: 6,
    defaultMarkerOpacity: 0.8,

    defaultLineColor: '#0070c0',
    defaultLineOpacity: 0.8,
    defaultLineWidth: 1,
    defaultLineMinWidth: 1,
    defaultLineMaxWidth: 1,

    defaultFillColor: '#7030a0',
    defaultFillOpacity: 0.8,

    defaultOutlineColor: '#ffffff',
    defaultOutlineOpacity: 0.8,
    defaultOutlineWidth: 1,

    defaultHeatPixelSize: 20,
    defaultHeatMinOpacity: 0,
    defaultHeatMaxOpacity: 0.8,
    defaultHeatResolution: 4,
    defaultHeatMapSize: 1000,
    defaultHeatSizeUnit: 'pixel',
    defaultHeatTopValue: 5,
    defaultHeatWeightField: '无',

    noDataColor: '#cccccc',

    defaultLabelColor: '#000000',
    defaultLabelFont: 'Microsoft YaHei Regular',
    defaultLabelSize: 12,
    defaultLabelDx: 0,
    defaultLabelDy: 0,
    defaultLabelPlacement: "point",
    defaultLabelAllowOverlap: false,
    defaultLabelHaloColor: "#ffffff",

    defaultBucketCount: 5,
    defaultBucketType: 'naturalbreaks',

    defaultBubbleMarkerColor: '#ff6a10',
    defaultBubbleMinSize: 2,
    defaultBubbleMaxSize: 20,
    defaultBubbleLegendMinSize: 1,
    //defaultBubbleLegendMaxSize: 16,
    defaultBubbleLegendItemCount: 5,
    defaultBubbleFillMode: 'single',

    defaultLineDashArray: undefined,

    fluidWidths: [0.1, 0.2, 0.5, 0.8, 1, 1.2, 1.5, 2, 2.5, 3, 5, 8, 10],
    fluidDurations: [10, 20, 50],
    fluidOpacities: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],

    defaultFluidWidth: 1.2,
    defaultFluidOpacity: 1,
    defaultFluidDuration: 50,
    defaultFluidTopValue: 50,
    defaultFluidColors: ['#fff'],

    lineSymbol: {
        lineColor: '#000',
        lineOpacity: 0.8
    },

    plugin: {
        GEO_LOCATION: 'geo-location',
        LAYER_LIST: 'layer-list',
        LEGEND: 'legend',
        LOGO: 'logo'
    }
};

function merge(objs) {
    // (Object[, Object, ...])
    var sources = Array.prototype.slice.call(arguments, 1);

    var i, j, len, src;
    for (j = 0, len = sources.length; j < len; j++) {
        src = sources[j] || {};
        for (i in src) {
            if (src.hasOwnProperty(i)) {
                objs[i] = src[i];
            }
        }
    }

    return objs;
}

function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}

function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}

function isString(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
}

function isFunction(obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
}

function renderString(template, data) {
    // template variable must be {A~Z|a~z|0~9|_}, not case-sensitive.
    if (!template) {
        return '';
    }

    return template.replace(/\{ *([\w]+) *\}/gi, function (template, key) {
        var value = data[key];
        return value === undefined ? '' : value;
    });
}

var _ajaxSeq = 0;
function ajax(url, options) {
    if (!url) {
        return;
    }

    var ajaxOptions = options || {};

    var context = ajaxOptions.context || this;

    var appendQueryParam = function appendQueryParam(url, key, value) {
        if (key === undefined || value === undefined) {
            return url;
        }

        url += url.match(/\?/) ? '&' : '?';
        url += key + '=' + encodeURIComponent(value);
        return url;
    };

    var trySuccess = function trySuccess(req, data) {
        if (success) {
            success.call(context, req, data);
        }
    };
    var tryError = function tryError(req) {
        if (error) {
            error.call(context, req);
        }
    };
    var tryComplete = function tryComplete(req) {
        if (complete) {
            complete.call(context, req);
        }
    };

    // HTTP request parameters
    var type = (ajaxOptions.type || 'GET').toUpperCase() === 'POST' ? 'POST' : 'GET',
        contentType = ajaxOptions.contentType,
        headers = ajaxOptions.headers || {},
        data = ajaxOptions.data || {},
        responseType = (ajaxOptions.responseType || 'DATA').toUpperCase(),
        // DATA|TEXT|XML|JSON|JSONP
    jsonp = ajaxOptions.jsonp || '_g_jsonp_' + _ajaxSeq++,
        jsonpCallback = ajaxOptions.jsonpCallback || 'callback',
        success = ajaxOptions.success,
        error = ajaxOptions.error,
        complete = ajaxOptions.complete;

    var loadCallback, key, script;

    type = responseType === 'JSONP' ? 'GET' : type; // JSONP only support GET method

    if (type === 'GET') {
        for (key in data) {
            url = appendQueryParam(url, key, data[key]);
        }

        data = null;
    } else {
        var postData = '';
        for (key in data) {
            postData = appendQueryParam(postData, key, data[key]);
        }
        if (postData[0] === '?') {
            postData = postData.slice(1);
        }

        data = postData;

        contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';
    }

    if (responseType === 'JSONP') {
        url = appendQueryParam(url, jsonpCallback, jsonp);

        script = document.createElement('script');
        script.src = url;
        script._g_jsonp_ = jsonp;

        window[jsonp] = function (json) {
            script._g_jsonp_value_ = json;
            window[jsonp] = null;

            if (script.parentNode) {
                script.parentNode.removeChild(script);
            }
        };

        loadCallback = function loadCallback() {
            if (script._g_abort_) {
                return;
            }

            if (!script.readyState /*FF*/ || script.readyState == 'loaded' || script.readyState == 'complete') {

                if (!script.success) {
                    script.success = true;

                    trySuccess(script, script._g_jsonp_value_);
                    tryComplete(script);
                }
            }
        };

        if ('onload' in script) {
            script.onload = loadCallback;
        } else {
            script.onreadystatechange = loadCallback;
        }

        script.onerror = function () {
            tryError(script);
            tryComplete(script);
        };

        var head = document.getElementsByTagName('head')[0];
        head.appendChild(script);
        return script;
    } else {
        var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');

        if (!xhr) {
            return;
        }

        loadCallback = function loadCallback() {
            if (xhr.readyState == 4) {
                if (xhr.status == 200 || xhr.status == 304) {
                    var responseData;
                    if (responseType === 'TEXT') {
                        responseData = xhr.responseText;
                    } else if (responseType === 'XML') {
                        responseData = xhr.responseXML;
                    } else if (responseType === 'JSON') {
                        /*jslint evil: true */
                        responseData = eval('(' + xhr.responseText + ')');
                    } else {
                        responseData = xhr.response;
                    }

                    trySuccess(xhr, responseData);
                } else {
                    tryError(xhr);
                }

                tryComplete(xhr);
            }
        };

        xhr.onload = loadCallback;

        xhr.onerror = function () {
            tryError(xhr);
            tryComplete(xhr);
        };

        xhr.open(type, url, true);

        if (contentType) {
            xhr.setRequestHeader('Content-Type', contentType);
        }

        for (key in headers) {
            xhr.setRequestHeader(key, headers[key]);
        }

        xhr.send(data);

        return xhr;
    }
}

function Rainbow() {
    var gradients = null;
    var minNum = 0;
    var maxNum = 100;
    var colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];
    setColours(colours);

    function setColours(spectrum) {
        if (spectrum.length < 2) {
            throw new Error('Rainbow must have two or more colours.');
        } else {
            var increment = (maxNum - minNum) / (spectrum.length - 1);
            var firstGradient = new ColourGradient();
            firstGradient.setGradient(spectrum[0], spectrum[1]);
            firstGradient.setNumberRange(minNum, minNum + increment);
            gradients = [firstGradient];

            for (var i = 1; i < spectrum.length - 1; i++) {
                var colourGradient = new ColourGradient();
                colourGradient.setGradient(spectrum[i], spectrum[i + 1]);
                colourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));
                gradients[i] = colourGradient;
            }

            colours = spectrum;
        }
    }

    this.setSpectrum = function () {
        setColours(arguments);
        return this;
    };

    this.setSpectrumByArray = function (array) {
        setColours(array);
        return this;
    };

    this.colourAt = function (number) {
        if (isNaN(number)) {
            throw new TypeError(number + ' is not a number');
        } else if (gradients.length === 1) {
            return gradients[0].colourAt(number);
        } else {
            var segment = (maxNum - minNum) / gradients.length;
            var index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);
            return gradients[index].colourAt(number);
        }
    };

    this.colorAt = this.colourAt;

    this.setNumberRange = function (minNumber, maxNumber) {
        if (maxNumber > minNumber) {
            minNum = minNumber;
            maxNum = maxNumber;
            setColours(colours);
        } else {
            throw new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');
        }
        return this;
    };
}

function ColourGradient() {
    var startColour = 'ff0000';
    var endColour = '0000ff';
    var minNum = 0;
    var maxNum = 100;

    this.setGradient = function (colourStart, colourEnd) {
        startColour = getHexColour(colourStart);
        endColour = getHexColour(colourEnd);
    };

    this.setNumberRange = function (minNumber, maxNumber) {
        if (maxNumber > minNumber) {
            minNum = minNumber;
            maxNum = maxNumber;
        } else {
            throw new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');
        }
    };

    this.colourAt = function (number) {
        return calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2)) + calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4)) + calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));
    };

    function calcHex(number, channelStart_Base16, channelEnd_Base16) {
        var num = number;
        if (num < minNum) {
            num = minNum;
        }
        if (num > maxNum) {
            num = maxNum;
        }
        var numRange = maxNum - minNum;
        var cStart_Base10 = parseInt(channelStart_Base16, 16);
        var cEnd_Base10 = parseInt(channelEnd_Base16, 16);
        var cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;
        var c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);
        return formatHex(c_Base10.toString(16));
    }

    function formatHex(hex) {
        if (hex.length === 1) {
            return '0' + hex;
        } else {
            return hex;
        }
    }

    function isHexColour(string) {
        var regex = /^#?[0-9a-fA-F]{6}$/i;
        return regex.test(string);
    }

    function getHexColour(string) {
        if (isHexColour(string)) {
            return string.substring(string.length - 6, string.length);
        } else {
            var name = string.toLowerCase();
            if (colourNames.hasOwnProperty(name)) {
                return colourNames[name];
            }
            throw new Error(string + ' is not a valid colour.');
        }
    }

    // Extended list of CSS colornames s taken from
    // http://www.w3.org/TR/css3-color/#svg-color
    var colourNames = {
        aliceblue: "F0F8FF",
        antiquewhite: "FAEBD7",
        aqua: "00FFFF",
        aquamarine: "7FFFD4",
        azure: "F0FFFF",
        beige: "F5F5DC",
        bisque: "FFE4C4",
        black: "000000",
        blanchedalmond: "FFEBCD",
        blue: "0000FF",
        blueviolet: "8A2BE2",
        brown: "A52A2A",
        burlywood: "DEB887",
        cadetblue: "5F9EA0",
        chartreuse: "7FFF00",
        chocolate: "D2691E",
        coral: "FF7F50",
        cornflowerblue: "6495ED",
        cornsilk: "FFF8DC",
        crimson: "DC143C",
        cyan: "00FFFF",
        darkblue: "00008B",
        darkcyan: "008B8B",
        darkgoldenrod: "B8860B",
        darkgray: "A9A9A9",
        darkgreen: "006400",
        darkgrey: "A9A9A9",
        darkkhaki: "BDB76B",
        darkmagenta: "8B008B",
        darkolivegreen: "556B2F",
        darkorange: "FF8C00",
        darkorchid: "9932CC",
        darkred: "8B0000",
        darksalmon: "E9967A",
        darkseagreen: "8FBC8F",
        darkslateblue: "483D8B",
        darkslategray: "2F4F4F",
        darkslategrey: "2F4F4F",
        darkturquoise: "00CED1",
        darkviolet: "9400D3",
        deeppink: "FF1493",
        deepskyblue: "00BFFF",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1E90FF",
        firebrick: "B22222",
        floralwhite: "FFFAF0",
        forestgreen: "228B22",
        fuchsia: "FF00FF",
        gainsboro: "DCDCDC",
        ghostwhite: "F8F8FF",
        gold: "FFD700",
        goldenrod: "DAA520",
        gray: "808080",
        green: "008000",
        greenyellow: "ADFF2F",
        grey: "808080",
        honeydew: "F0FFF0",
        hotpink: "FF69B4",
        indianred: "CD5C5C",
        indigo: "4B0082",
        ivory: "FFFFF0",
        khaki: "F0E68C",
        lavender: "E6E6FA",
        lavenderblush: "FFF0F5",
        lawngreen: "7CFC00",
        lemonchiffon: "FFFACD",
        lightblue: "ADD8E6",
        lightcoral: "F08080",
        lightcyan: "E0FFFF",
        lightgoldenrodyellow: "FAFAD2",
        lightgray: "D3D3D3",
        lightgreen: "90EE90",
        lightgrey: "D3D3D3",
        lightpink: "FFB6C1",
        lightsalmon: "FFA07A",
        lightseagreen: "20B2AA",
        lightskyblue: "87CEFA",
        lightslategray: "778899",
        lightslategrey: "778899",
        lightsteelblue: "B0C4DE",
        lightyellow: "FFFFE0",
        lime: "00FF00",
        limegreen: "32CD32",
        linen: "FAF0E6",
        magenta: "FF00FF",
        maroon: "800000",
        mediumaquamarine: "66CDAA",
        mediumblue: "0000CD",
        mediumorchid: "BA55D3",
        mediumpurple: "9370DB",
        mediumseagreen: "3CB371",
        mediumslateblue: "7B68EE",
        mediumspringgreen: "00FA9A",
        mediumturquoise: "48D1CC",
        mediumvioletred: "C71585",
        midnightblue: "191970",
        mintcream: "F5FFFA",
        mistyrose: "FFE4E1",
        moccasin: "FFE4B5",
        navajowhite: "FFDEAD",
        navy: "000080",
        oldlace: "FDF5E6",
        olive: "808000",
        olivedrab: "6B8E23",
        orange: "FFA500",
        orangered: "FF4500",
        orchid: "DA70D6",
        palegoldenrod: "EEE8AA",
        palegreen: "98FB98",
        paleturquoise: "AFEEEE",
        palevioletred: "DB7093",
        papayawhip: "FFEFD5",
        peachpuff: "FFDAB9",
        peru: "CD853F",
        pink: "FFC0CB",
        plum: "DDA0DD",
        powderblue: "B0E0E6",
        purple: "800080",
        red: "FF0000",
        rosybrown: "BC8F8F",
        royalblue: "4169E1",
        saddlebrown: "8B4513",
        salmon: "FA8072",
        sandybrown: "F4A460",
        seagreen: "2E8B57",
        seashell: "FFF5EE",
        sienna: "A0522D",
        silver: "C0C0C0",
        skyblue: "87CEEB",
        slateblue: "6A5ACD",
        slategray: "708090",
        slategrey: "708090",
        snow: "FFFAFA",
        springgreen: "00FF7F",
        steelblue: "4682B4",
        tan: "D2B48C",
        teal: "008080",
        thistle: "D8BFD8",
        tomato: "FF6347",
        turquoise: "40E0D0",
        violet: "EE82EE",
        wheat: "F5DEB3",
        white: "FFFFFF",
        whitesmoke: "F5F5F5",
        yellow: "FFFF00",
        yellowgreen: "9ACD32"
    };
}

var getColors = function () {

    var rainbow = new Rainbow();

    return function (colors, len, version) {
        var result = [];
        if (version === '1.0.0') {
            return colors;
        } else {
            rainbow.setNumberRange(0, len);
            rainbow.setSpectrum.apply(undefined, colors);
            for (var i = 0; i < len; i++) {
                result.push('#' + rainbow.colourAt(i));
            }
        }
        return result;
    };
}();

var ConfigBase = function ConfigBase(options) {

    this.version = options && options.version ? options.version : '0.0.1';

    this.labelField = options && options['labelField'] ? options['labelField'] : undefined;
    this.labelColor = options && options['labelColor'] ? options['labelColor'] : Constants.defaultLabelColor;
    this.labelFont = options && options['labelFont'] ? options['labelFont'] : Constants.defaultLabelFont;
    this.labelSize = options && options['labelSize'] ? options['labelSize'] : Constants.defaultLabelSize;
    this.labelDx = options && options['labelDx'] ? options['labelDx'] : Constants.defaultLabelDx;
    this.labelDy = options && options['labelDy'] ? options['labelDy'] : Constants.defaultLabelDy;
    this.labelPlacement = options && options['labelPlacement'] ? options['labelPlacement'] : Constants.defaultLabelPlacement;
    this.labelHaloColor = options && options['labelHaloColor'] ? options['labelHaloColor'] : Constants.defaultLabelHaloColor;
    this.labelAllowOverlap = options && options['labelAllowOverlap'] ? options['labelAllowOverlap'] : Constants.defaultLabelAllowOverlap;
};

ConfigBase.prototype.toJSON = function () {
    return this;
};

ConfigBase.prototype.isReady = function () {
    return true;
};

var MarkerConfigBase = function MarkerConfigBase(options) {
    ConfigBase.apply(this, arguments);
    this.markerColor = options && options['markerColor'] ? options['markerColor'] : Constants.defaultMarkerColor;
    this.markerSize = options && options['markerSize'] ? options['markerSize'] : Constants.defaultMarkerSize;
    this.markerOpacity = options && (options['markerOpacity'] || options['markerOpacity'] == 0) ? options['markerOpacity'] : Constants.defaultMarkerOpacity;
    this.outlineColor = options && options['outlineColor'] ? options['outlineColor'] : Constants.defaultOutlineColor;
    this.outlineWidth = options && (options['outlineWidth'] || options['outlineWidth'] == 0) ? options['outlineWidth'] : Constants.defaultOutlineWidth;
    this.outlineOpacity = options && (options['outlineOpacity'] || options['outlineOpacity'] == 0) ? options['outlineOpacity'] : Constants.defaultOutlineOpacity;
};

MarkerConfigBase.prototype = new ConfigBase();

var MarkerSimpleConfig = function MarkerSimpleConfig(options) {
    this.type = Constants.configTypes.MARKER_SIMPLE;
    this.blendingMode = options && options['blendingMode'] ? options['blendingMode'] : Constants.defaultBlendingMode;
    MarkerConfigBase.apply(this, arguments);
};

MarkerSimpleConfig.prototype = new MarkerConfigBase();

//
var MarkerChoroplethConfig = function MarkerChoroplethConfig(options) {
    this.type = Constants.configTypes.MARKER_CHOROPLETH;
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.bucketCount = options && options['bucketCount'] ? options['bucketCount'] : Constants.defaultBucketCount;
    this.bucketType = options && options['bucketType'] ? options['bucketType'] : Constants.defaultBucketType;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.colorsReversed = options && options['colorsReversed'] ? options['colorsReversed'] : false;
    this.markerColor = Constants.noDataColor;
    this.breaks = options && options['breaks'] ? options['breaks'] : undefined;
    this.blendingMode = options && options['blendingMode'] ? options['blendingMode'] : Constants.defaultBlendingMode;
    // 兼容历史版本
    if (options && options.equalInterval) {
        this.bucketType = 'equalinterval';
        this.breaks = [];
        for (var i = 0; i < options.breakCount; i++) {
            this.breaks[i] = options.equalInterval.max - i * options.equalInterval.step;
        }
    }
    MarkerConfigBase.apply(this, arguments);
};

MarkerChoroplethConfig.prototype = new MarkerConfigBase();
MarkerChoroplethConfig.prototype.toJSON = function () {
    var buckets = [];

    var colors = getColors(this.colors, this.bucketCount, this.version);

    for (var i = 0; i < this.breaks.length; i++) {
        var index = this.colorsReversed ? this.breaks.length - 1 - i : i;
        buckets.push({
            value: this.breaks[i],
            color: colors[index] || '#ffffff'
        });
    }

    return {
        type: this.type,
        markerSize: this.markerSize,
        markerColor: this.markerColor,
        markerOpacity: this.markerOpacity,
        outlineColor: this.outlineColor,
        outlineWidth: this.outlineWidth,
        outlineOpacity: this.outlineOpacity,
        blendingMode: this.blendingMode,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap
    };
};

var MarkerBubbleConfig = function MarkerBubbleConfig(options) {
    this.type = Constants.configTypes.MARKER_BUBBLE;
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.bucketCount = options && options['bucketCount'] ? options['bucketCount'] : Constants.defaultBucketCount;
    this.bucketType = options && options['bucketType'] ? options['bucketType'] : Constants.defaultBucketType;
    this.markerColor = options && options['markerColor'] ? options['markerColor'] : Constants.defaultBubbleMarkerColor;
    this.breaks = options && options['breaks'] ? options['breaks'] : undefined;
    this.minSize = options && options['minSize'] ? options['minSize'] : Constants.defaultBubbleMinSize;
    this.maxSize = options && options['maxSize'] ? options['maxSize'] : Constants.defaultBubbleMaxSize;
    // 颜色渲染设置
    this.fillMode = options && options['fillMode'] ? options['fillMode'] : Constants.defaultBubbleFillMode;
    this.colorFieldName = options && options['colorFieldName'] ? options['colorFieldName'] : undefined;
    this.colorBucketCount = options && options['colorBucketCount'] ? options['colorBucketCount'] : Constants.defaultBucketCount;
    this.colorBucketType = options && options['colorBucketType'] ? options['colorBucketType'] : Constants.defaultBucketType;
    this.colorBreaks = options && options['colorBreaks'] ? options['colorBreaks'] : undefined;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    //
    MarkerConfigBase.apply(this, arguments);
};

MarkerBubbleConfig.prototype = new MarkerConfigBase();
MarkerBubbleConfig.prototype.isReady = function () {
    if (this.fillMode == 'single') {
        return true;
    }
    return this.breaks && this.colorBreaks;
};
MarkerBubbleConfig.prototype.toJSON = function () {
    var buckets = [];
    var diff = (this.maxSize - this.minSize) / (this.breaks.length - 1);
    for (var i = 0; i < this.breaks.length; i++) {
        buckets.push({
            value: this.breaks[i],
            markerSize: this.maxSize - i * diff
        });
    }

    var result = {
        type: this.type,
        markerColor: this.markerColor,
        markerOpacity: this.markerOpacity,
        outlineColor: this.outlineColor,
        outlineWidth: this.outlineWidth,
        outlineOpacity: this.outlineOpacity,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap,
        fillMode: this.fillMode
    };

    if (this.fillMode == 'multi') {
        buckets = [];
        var colors = getColors(this.colors, this.colorBucketCount, this.version);
        for (var _i = 0; _i < this.colorBreaks.length; _i++) {
            buckets.push({
                value: this.colorBreaks[_i],
                color: colors[_i] || '#ffffff'
            });
        }
        result['colorBuckets'] = buckets;
        result['colorFieldName'] = this.colorFieldName;
    }

    return result;
};

//
var MarkerCategoryConfig = function MarkerCategoryConfig(options) {
    this.type = Constants.configTypes.MARKER_CATEGORY;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.fieldValues = options && options['fieldValues'] ? options['fieldValues'] : undefined;
    this.fieldColors = options && options['fieldColors'] ? options['fieldColors'] : undefined;
    this.blendingMode = options && options['blendingMode'] ? options['blendingMode'] : Constants.defaultBlendingMode;
    MarkerConfigBase.apply(this, arguments);

    if (!this.fieldValues && options.buckets) {
        this.fieldValues = [];
        for (var i = 0; i < options.buckets.length; i++) {
            this.fieldValues.push(options.buckets[i].value);
        }
    }
    if (!this.fieldColors && options.buckets) {
        this.fieldColors = [];
        for (var _i2 = 0; _i2 < options.buckets.length; _i2++) {
            this.fieldColors.push(options.buckets[_i2].color);
        }
    }
};

MarkerCategoryConfig.prototype = new MarkerConfigBase();
MarkerCategoryConfig.prototype.toJSON = function () {
    var buckets = [];
    for (var i = 0; i < this.fieldValues.length; i++) {
        var color = this.fieldColors[i];
        color = color.indexOf('#') == -1 ? '#' + color : color;
        buckets.push({
            value: this.fieldValues[i],
            color: color
        });
    }
    return {
        type: this.type,
        markerSize: this.markerSize,
        markerOpacity: this.markerOpacity,
        outlineColor: this.outlineColor,
        outlineWidth: this.outlineWidth,
        outlineOpacity: this.outlineOpacity,
        blendingMode: this.blendingMode,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap
    };
};

//
var MarkerIntensityConfig = function MarkerIntensityConfig(options) {
    this.type = Constants.configTypes.MARKER_INTENSITY;
    this.blendingMode = options && options['blendingMode'] ? options['blendingMode'] : Constants.defaultBlendingMode;
    MarkerConfigBase.apply(this, arguments);
};

MarkerIntensityConfig.prototype = new MarkerConfigBase();

//
var MarkerHeatConfig = function MarkerHeatConfig(options) {
    this.type = Constants.configTypes.MARKER_HEAT;
    this.heatSizeUnit = options && options['heatSizeUnit'] ? options['heatSizeUnit'] : Constants.defaultHeatSizeUnit;
    this.heatSize = options && options['heatSize'] ? options['heatSize'] : Constants.defaultHeatSize;
    this.heatMinOpacity = options && (options['heatMinOpacity'] || options['heatMinOpacity'] == 0) ? options['heatMinOpacity'] : Constants.defaultHeatMinOpacity;
    if (options['heatOpacity']) {
        this.heatMaxOpacity = options['heatOpacity'];
    } else {
        this.heatMaxOpacity = options && (options['heatMaxOpacity'] || options['heatMaxOpacity'] == 0) ? options['heatMaxOpacity'] : Constants.defaultHeatMaxOpacity;
    }
    this.heatTopValue = options && options['heatTopValue'] ? options['heatTopValue'] : Constants.defaultHeatTopValue;
    this.resolution = options && options['resolution'] ? options['resolution'] : Constants.defaultHeatResolution;
    this.weightField = options && options['weightField'] ? options['weightField'] : undefined;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultHeatColor;
    //
    this.animated = options && options['animated'] ? options['animated'] : false;
    this.timeField = options && options['timeField'] ? options['timeField'] : undefined;
    this.frameCount = options && options['frameCount'] ? options['frameCount'] : Constants.defaultTimeSegment;
    this.duration = options && options['duration'] ? options['duration'] : Constants.defaultTimeDuration;
    this.timeAccumulate = options && options['timeAccumulate'] ? options['timeAccumulate'] : false;
};

MarkerHeatConfig.prototype.toJSON = function () {
    return this;
};

//
var MarkerFluidConfig = function MarkerFluidConfig(options) {
    this.type = Constants.configTypes.MARKER_FLUID;
    this.uField = options && options['uField'] ? options['uField'] : undefined;
    this.vField = options && options['vField'] ? options['vField'] : undefined;
    this.width = options && options['width'] ? options['width'] : Constants.defaultFluidWidth;
    this.duration = options && options['duration'] ? options['duration'] : Constants.defaultFluidDuration;
    this.opacity = options && options['opacity'] ? options['opacity'] : Constants.defaultFluidOpacity;
    this.topValue = options && options['topValue'] ? options['topValue'] : Constants.defaultFluidTopValue;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultFluidColors;
};

MarkerFluidConfig.prototype = new MarkerConfigBase();

//
var PolylineConfigBase = function PolylineConfigBase(options) {
    this.lineColor = options && options['lineColor'] ? options['lineColor'] : Constants.defaultLineColor;
    this.lineOpacity = options && (options['lineOpacity'] || options['lineOpacity'] == 0) ? options['lineOpacity'] : Constants.defaultLineOpacity;
    this.blendingMode = options && options['blendingMode'] ? options['blendingMode'] : Constants.defaultBlendingMode;
    this.lineDashArray = options && options['lineDashArray'] ? options['lineDashArray'] : Constants.defaultLineDashArray;
    ConfigBase.apply(this, arguments);
};

PolylineConfigBase.prototype = new ConfigBase();

//
var PolylineSimpleConfig = function PolylineSimpleConfig(options) {
    this.type = Constants.configTypes.POLYLINE_SIMPLE;
    PolylineConfigBase.apply(this, arguments);
    this.lineWidth = options && options['lineWidth'] ? options['lineWidth'] : Constants.defaultLineWidth;
};

PolylineSimpleConfig.prototype = new PolylineConfigBase();

//
var PolylineChoroplethConfig = function PolylineChoroplethConfig(options) {
    this.type = Constants.configTypes.POLYLINE_CHOROPLETH;
    PolylineConfigBase.apply(this, arguments);
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.bucketCount = options && options['bucketCount'] ? options['bucketCount'] : Constants.defaultBucketCount;
    this.bucketType = options && options['bucketType'] ? options['bucketType'] : Constants.defaultBucketType;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.colorsReversed = options && options['colorsReversed'] ? options['colorsReversed'] : false;
    this.lineColor = Constants.noDataColor;
    this.breaks = options && options['breaks'] ? options['breaks'] : undefined;
    //宽度渲染设置
    this.minWidth = options && options['minWidth'] ? options['minWidth'] : Constants.defaultLineMinWidth;
    this.maxWidth = options && options['maxWidth'] ? options['maxWidth'] : Constants.defaultLineMaxWidth;
    // 兼容历史版本
    if (options['lineWidth']) {
        this.minWidth = options['lineWidth'];
        this.maxWidth = options['lineWidth'];
    }
    if (options && options.equalInterval) {
        this.bucketType = 'equalinterval';
        this.breaks = [];
        for (var i = 0; i < options.breakCount; i++) {
            this.breaks[i] = options.equalInterval.max - i * options.equalInterval.step;
        }
    }
};

PolylineChoroplethConfig.prototype = new PolylineConfigBase();
PolylineChoroplethConfig.prototype.toJSON = function () {
    var buckets = [];

    var colors = getColors(this.colors, this.bucketCount, this.version);
    var diff = (this.maxWidth - this.minWidth) / (this.breaks.length - 1);
    for (var i = 0; i < this.breaks.length; i++) {
        var index = this.colorsReversed ? this.breaks.length - 1 - i : i;
        buckets.push({
            value: this.breaks[i],
            color: colors[index] || '#ffffff',
            lineWidth: this.maxWidth - i * diff
        });
    }
    var result = {
        type: this.type,
        lineColor: this.lineColor,
        lineOpacity: this.lineOpacity,
        lineDashArray: this.lineDashArray,
        blendingMode: this.blendingMode,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap,
        fillMode: this.fillMode
    };
    return result;
};

//
var PolylineCategoryConfig = function PolylineCategoryConfig(options) {
    this.type = Constants.configTypes.POLYLINE_CATEGORY;
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.fieldValues = options && options['fieldValues'] ? options['fieldValues'] : undefined;
    this.fieldColors = options && options['fieldColors'] ? options['fieldColors'] : undefined;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.lineWidth = options && options['lineWidth'] ? options['lineWidth'] : Constants.defaultLineWidth;
    PolylineConfigBase.apply(this, arguments);
};

PolylineCategoryConfig.prototype = new PolylineConfigBase();
PolylineCategoryConfig.prototype.toJSON = function () {
    var buckets = [];
    for (var i = 0; i < this.fieldValues.length; i++) {
        var color = this.fieldColors[i];
        color = color.indexOf('#') == -1 ? '#' + color : color;
        buckets.push({
            value: this.fieldValues[i],
            color: color
        });
    }
    return {
        type: this.type,
        lineOpacity: this.lineOpacity,
        lineWidth: this.lineWidth,
        lineDashArray: this.lineDashArray,
        blendingMode: this.blendingMode,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap
    };
};

//
var PolygonConfigBase = function PolygonConfigBase(options) {
    this.fillColor = options && options['fillColor'] ? options['fillColor'] : Constants.defaultFillColor;
    this.fillOpacity = options && (options['fillOpacity'] || options['fillOpacity'] == 0) ? options['fillOpacity'] : Constants.defaultFillOpacity;
    this.outlineColor = options && options['outlineColor'] ? options['outlineColor'] : Constants.defaultOutlineColor;
    this.outlineOpacity = options && (options['outlineOpacity'] || options['outlineOpacity'] == 0) ? options['outlineOpacity'] : Constants.defaultOutlineOpacity;
    this.outlineWidth = options && (options['outlineWidth'] || options['outlineWidth'] == 0) ? options['outlineWidth'] : Constants.defaultOutlineWidth;
    this.lineDashArray = options && options['lineDashArray'] ? options['lineDashArray'] : Constants.defaultLineDashArray;
    ConfigBase.apply(this, arguments);
};

PolygonConfigBase.prototype = new ConfigBase();

//
var PolygonSimpleConfig = function PolygonSimpleConfig(options) {
    this.type = Constants.configTypes.POLYGON_SIMPLE;
    PolygonConfigBase.apply(this, arguments);
};

PolygonSimpleConfig.prototype = new PolygonConfigBase();

//
var PolygonChoroplethConfig = function PolygonChoroplethConfig(options) {
    this.type = Constants.configTypes.POLYGON_CHOROPLETH;
    PolygonConfigBase.apply(this, arguments);
    //
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.bucketCount = options && options['bucketCount'] ? options['bucketCount'] : Constants.defaultBucketCount;
    this.bucketType = options && options['bucketType'] ? options['bucketType'] : Constants.defaultBucketType;
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.colorsReversed = options && options['colorsReversed'] ? options['colorsReversed'] : false;
    this.fillColor = Constants.noDataColor;
    this.breaks = options && options['breaks'] ? options['breaks'] : undefined;
    // 兼容历史版本
    if (options && options.equalInterval) {
        this.bucketType = 'equalinterval';
        this.breaks = [];
        for (var i = 0; i < options.breakCount; i++) {
            this.breaks[i] = options.equalInterval.max - i * options.equalInterval.step;
        }
    }
};

PolygonChoroplethConfig.prototype = new PolygonConfigBase();
PolygonChoroplethConfig.prototype.toJSON = function () {
    var buckets = [];

    var colors = getColors(this.colors, this.bucketCount, this.version);
    for (var i = 0; i < this.breaks.length; i++) {
        var index = this.colorsReversed ? this.breaks.length - 1 - i : i;
        buckets.push({
            value: this.breaks[i],
            color: colors[index] || '#ffffff'
        });
    }
    return {
        type: this.type,
        fillColor: this.fillColor,
        fillOpacity: this.fillOpacity,
        outlineColor: this.outlineColor,
        outlineWidth: this.outlineWidth,
        outlineOpacity: this.outlineOpacity,
        lineDashArray: this.lineDashArray,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap
    };
};

//
var PolygonCategoryConfig = function PolygonCategoryConfig(options) {
    this.type = Constants.configTypes.POLYGON_CATEGORY;
    PolygonConfigBase.apply(this, arguments);
    //
    this.colors = options && options['colors'] ? options['colors'] : Constants.defaultColorRamp;
    this.fieldName = options && options['fieldName'] ? options['fieldName'] : undefined;
    this.fieldValues = options && options['fieldValues'] ? options['fieldValues'] : undefined;
    this.fieldColors = options && options['fieldColors'] ? options['fieldColors'] : undefined;
};

PolygonCategoryConfig.prototype = new PolygonConfigBase();
PolygonCategoryConfig.prototype.toJSON = function () {
    var buckets = [];
    for (var i = 0; i < this.fieldValues.length; i++) {
        var color = this.fieldColors[i];
        color = color.indexOf('#') == -1 ? '#' + color : color;
        buckets.push({
            value: this.fieldValues[i],
            color: color
        });
    }
    return {
        type: this.type,
        fillOpacity: this.fillOpacity,
        outlineColor: this.outlineColor,
        outlineWidth: this.outlineWidth,
        outlineOpacity: this.outlineOpacity,
        lineDashArray: this.lineDashArray,
        fieldName: this.fieldName,
        buckets: buckets,
        labelField: this.labelField,
        labelFont: this.labelFont,
        labelSize: this.labelSize,
        labelColor: this.labelColor,
        labelDx: this.labelDx,
        labelDy: this.labelDy,
        labelPlacement: this.labelPlacement,
        labelHaloColor: this.labelHaloColor,
        labelAllowOverlap: this.labelAllowOverlap
    };
};

function create(options) {
    if (options == null) return null;

    if (options == Constants.configTypes.MARKER_SIMPLE || options.type == Constants.configTypes.MARKER_SIMPLE) return new MarkerSimpleConfig(options);else if (options == Constants.configTypes.MARKER_INTENSITY || options.type == Constants.configTypes.MARKER_INTENSITY)
        //return new MarkerIntensityConfig(options);
        return new MarkerSimpleConfig(options);else if (options == Constants.configTypes.MARKER_HEAT || options.type == Constants.configTypes.MARKER_HEAT) return new MarkerHeatConfig(options);else if (options == Constants.configTypes.MARKER_CHOROPLETH || options.type == Constants.configTypes.MARKER_CHOROPLETH) return new MarkerChoroplethConfig(options);else if (options == Constants.configTypes.MARKER_BUBBLE || options.type == Constants.configTypes.MARKER_BUBBLE) return new MarkerBubbleConfig(options);else if (options == Constants.configTypes.MARKER_CATEGORY || options.type == Constants.configTypes.MARKER_CATEGORY) return new MarkerCategoryConfig(options);else if (options == Constants.configTypes.MARKER_FLUID || options.type == Constants.configTypes.MARKER_FLUID) return new MarkerFluidConfig(options);else if (options == Constants.configTypes.POLYGON_SIMPLE || options.type == Constants.configTypes.POLYGON_SIMPLE) return new PolygonSimpleConfig(options);else if (options == Constants.configTypes.POLYGON_CHOROPLETH || options.type == Constants.configTypes.POLYGON_CHOROPLETH) return new PolygonChoroplethConfig(options);else if (options == Constants.configTypes.POLYGON_CATEGORY || options.type == Constants.configTypes.POLYGON_CATEGORY) return new PolygonCategoryConfig(options);else if (options == Constants.configTypes.POLYLINE_SIMPLE || options.type == Constants.configTypes.POLYLINE_SIMPLE) return new PolylineSimpleConfig(options);else if (options == Constants.configTypes.POLYLINE_CHOROPLETH || options.type == Constants.configTypes.POLYLINE_CHOROPLETH) return new PolylineChoroplethConfig(options);else if (options == Constants.configTypes.POLYLINE_CATEGORY || options.type == Constants.configTypes.POLYLINE_CATEGORY) return new PolylineCategoryConfig(options);
}

function Layer(url, options) {

	this.url = url;
	this.options = options;
}

Layer.prototype = {
	constructor: Layer,

	tileSize: 256,

	originX: -20037508.342784,
	originY: 20037508.342784,

	zoomReses: [156543.033928, 78271.516964, 39135.758482, 19567.879241, 9783.9396205, 4891.96981025, 2445.984905125, 1222.9924525625, 611.49622628125, 305.748113140625, 152.8740565703125, 76.43702828515625, 38.21851414257813, 19.10925707128906, 9.554628535644531, 4.777314267822266, 2.388657133911133, 1.194328566955567, 0.597164283477783, 0.298582141738892],

	getTileUrl: function getTileUrl(idxX, idxY, zoom) {

		var url = this.url;
		var cluster = this.options.cluster;

		if (!url) {
			return null;
		}

		var scale = this.options.scale || 1;

		var tileUrlPattern = isFunction(url) ? url(zoom, idxX, idxY, scale) : url;

		var server = void 0;
		if (isArray(cluster) && cluster.length > 0) {
			var i = Math.abs(idxX + idxY) % cluster.length;
			server = cluster[i];
		}

		return renderString(tileUrlPattern, merge({
			s: server,
			z: zoom,
			x: idxX,
			y: idxY,
			i: scale > 1 ? '@2x' : ''
		}, this.options));
	},
	setTileUrl: function setTileUrl(url) {

		this.url = url;
	},
	setMap: function setMap() {},
	getMap: function getMap() {},
	setzIndex: function setzIndex() {},
	getzIndex: function getzIndex() {},
	hide: function hide() {},
	show: function show() {}
};

var HEAT_SIZE_SCALE = 1.5;

function Heat(url, dataFunc, options) {
	var _this = this;

	Layer.call(this, url, options);

	this.map = null;

	var layerOptions = {
		originX: this.originX,
		originY: this.originY,
		zoomReses: this.zoomReses
	};

	var heatmapOptions = {
		radius: options.radiusUnit === 'map' ? 20 : options.radius * HEAT_SIZE_SCALE,
		opacity: [options.minOpacity, options.maxOpacity],
		gradient: options.colors
	};

	var tiles = {};

	this.dataSet = [];

	var _update = function _update(x, y, z, success, fail) {

		var reqUrl = _this.getTileUrl(x, y, z);
		var tileInfo = [x, y, z];

		if (!reqUrl) return null;

		var key = x + ',' + y + ',' + z;

		if (tiles[key]) {
			fail();

			[].push.apply(_this.dataSet, tiles[key]);

			_this._redraw();
			return;
		}

		ajax(reqUrl, {
			responseType: _this.options.responseType,
			success: function success(xhr, data) {

				data = JSON.parse(data);

				var dataPoints = dataFunc(tileInfo, data, layerOptions) || [];

				tiles[key] = dataPoints;

				[].push.apply(_this.dataSet, dataPoints);

				fail();

				_this._redraw();
			},
			complete: function complete(xhr) {
				fail();
			}
		});
	};

	var _handler = void 0;

	this._redraw = function () {

		clearTimeout(_handler);

		_handler = setTimeout(function () {
			_this._heatmap.setDataSet({
				max: options.topValue,
				data: _this.dataSet
			});
		}, 300);
	};

	this._layer = new AMap.TileLayer.Flexible({
		createTile: _update,
		cacheSize: 1
	});

	this._heatmap = new AMap.Heatmap(null, heatmapOptions);

	var methods = ['setMap', 'getMap', 'hide', 'show', 'getzIndex', 'setzIndex'];

	methods.map(function (key) {

		_this[key] = function (arg) {
			var _this2 = this;

			if (key === 'setMap') {

				if (arg && arg !== this.map) {
					this.map = arg;

					if (this.options.radiusUnit === 'map') {
						var res = this.map.getResolution();

						var heatSize = this.options.radius / res;

						heatmapOptions.radius = heatSize * HEAT_SIZE_SCALE;

						this._heatmap.setOptions(heatmapOptions);
					}

					this.map.on('zoomstart', function () {
						_this2.dataSet = [];
					});

					this.map.on('zoomend', function () {

						if (_this2.options.radiusUnit === 'map') {
							var _res = _this2.map.getResolution();
							var _heatSize = _this2.options.radius / _res;

							heatmapOptions.radius = _heatSize * HEAT_SIZE_SCALE;

							_this2._heatmap.setOptions(heatmapOptions);
						}
					});
				}
			}

			this._layer[key](arg);
			this._heatmap[key](arg);
		};
	});

	this.reload = function () {
		this._layer.reload();
	};
}

Heat.prototype = Object.assign(Object.create(Layer.prototype), {});

var DEGREE_PER_RADIAN = 180 / Math.PI;

var WebMercator = {
    a: 6378137,
    max: 20037507.842788246,

    project: function project(lon, lat) {
        var self = WebMercator,
            // 不可用this，因调用的context不定
        f = DEGREE_PER_RADIAN,
            r = self.a,
            x = lon / f * r,
            sine = Math.sin(lat / f),
            y = r / 2 * Math.log((1 + sine) / (1 - sine));

        if (!self._isCoordinates(lon, lat)) {
            throw new Error("Type of coordinates should be number");
        }

        if (y === Infinity) {
            y = self.max;
        } else if (y === -Infinity) {
            y = -self.max;
        }

        return [x, y];
    },

    unproject: function unproject(x, y) {
        var self = WebMercator,
            // 不可用this，因调用的context不定
        f = DEGREE_PER_RADIAN,
            r = self.a,
            xRad = x / r,
            PI = Math.PI,
            lonR = xRad - Math.floor(xRad / PI / 2 + 0.5) * PI * 2,
            latR = PI / 2 - Math.atan(Math.exp(-y / r)) * 2;

        if (!self._isCoordinates(x, y)) {
            throw new Error("Type of coordinates should be number");
        }

        return [lonR * f, latR * f];
    },

    _isCoordinates: function _isCoordinates(lon, lat) {
        return typeof lon === 'number' && typeof lat === 'number';
    }
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

function UTFGrid(url, options) {
	var _this = this;

	Layer.call(this, url, options);

	this.map = null;

	this._visible = true;

	this._window = new AMap.InfoWindow({
		autoMove: false
	});

	this._tiles = {};

	var _update = function _update(x, y, z, success, fail) {

		var reqUrl = _this.getTileUrl(x, y, z);
		if (!reqUrl) return null;

		var key = x + ',' + y + ',' + z;

		if (_this._tiles[key]) {
			fail();
			return;
		}

		ajax(reqUrl, {
			responseType: _this.options.responseType,
			success: function success(xhr, data) {

				data = JSON.parse(data);

				if (!data || !data.data || !data.data.keys || data.data.keys.length == 1 && data.data.keys[0] == '') {
					return false;
				}

				_this._tiles[key] = data.data;

				fail();
			},
			complete: function complete(xhr) {
				fail();
			}
		});
	};

	this._layer = new AMap.TileLayer.Flexible({
		createTile: _update,
		cacheSize: 0
	});

	var methods = ['setMap', 'getMap', 'hide', 'show', 'getzIndex', 'setzIndex'];

	methods.map(function (key) {

		_this[key] = function (arg) {

			if (key === 'setMap') {

				if (arg && arg !== this.map) {
					this.map = arg;

					this.map.on('mousemove', this._onMouseMove, this);
				}
			}

			if (key === 'hide' || key === 'show') {
				this._visible = key === 'show';
			}

			this._layer[key](arg);
		};
	});

	this.reload = function () {
		this._layer.reload();
	};
}

UTFGrid.prototype = Object.assign(Object.create(Layer.prototype), {
	getData: function getData(tileInfo, gridX, gridY) {

		var key = tileInfo.join(',');
		var data = this._tiles[key];

		if (data && data.grid) {
			var idx = this._decode(data.grid[gridY].charCodeAt(gridX));
			key = data.keys[idx];
			return data.data[key];
		}
	},
	showData: function showData(data, lnglat) {

		if (!this.map) return;

		if (!data) {

			this._window.close();
		} else {
			var html = '';
			for (var key in data) {
				if (key === '_id') continue; // 不显示_id字段
				html += '<div style="height: 20px;\n\t\t\t\t\t\t\tfont-size: 13px;\n\t\t\t\t\t\t\tline-height: 20px;\n\t\t\t\t\t\t\tcolor: #333;\n\t\t\t\t\t\t\toverflow: hidden;\n\t\t\t\t\t\t\twhite-space: nowrap;">\n\t\t\t\t\t\t\t<span style="color: #777;">' + key + ': </span><span>' + data[key] + '</span></div>';
			}

			this._window.setContent(html);

			if (this._window.getIsOpen()) {
				this._window.setPosition(lnglat);
			} else {
				this._window.open(this.map, lnglat);
			}
		}
	},


	_decode: function _decode(c) {
		if (c >= 93) {
			c--;
		}
		if (c >= 35) {
			c--;
		}
		return c - 32;
	},

	_onMouseMove: function _onMouseMove(e) {

		if (!this._visible) {
			return;
		}

		var originX = this.originX,
		    originY = this.originY,
		    zoomReses = this.zoomReses,
		    tileSize = this.tileSize;


		var res = map.getResolution();

		var z = map.getZoom();

		var _WebMercator$project = WebMercator.project(e.lnglat.lng, e.lnglat.lat),
		    _WebMercator$project2 = slicedToArray(_WebMercator$project, 2),
		    mapX = _WebMercator$project2[0],
		    mapY = _WebMercator$project2[1];

		var screenX = (mapX - originX) / res;
		var screenY = (originY - mapY) / res;

		var tileMapSize = tileSize * zoomReses[z];

		var gridSize = tileMapSize / res;

		var factor = gridSize / tileSize;
		var gridRes = factor * 4;

		var x = Math.floor(screenX / gridSize);
		var y = Math.floor(screenY / gridSize);

		var gridX = Math.floor((screenX - x * gridSize) / gridRes);
		var gridY = Math.floor((screenY - y * gridSize) / gridRes);

		var tileInfo = [x, y, z];

		var data = this.getData(tileInfo, gridX, gridY);

		if (this.options.onMouseMove) {
			this.options.onMouseMove(data, e.lnglat);
		}

		if (this.options.showAttr) {
			this.showData(data, e.lnglat);
		}
	}
});

function Timed(layerList, options) {

	Layer.call(this, null, options);

	this._playing = false;
}

Timed.prototype = Object.assign(Object.create(Layer.prototype), {
	play: function play() {},
	stop: function stop() {},
	pause: function pause() {}
});

function TimedTile(layerList, options) {

	Timed.call(this, null, options);

	this._layerList = layerList || [];

	this._current = 0;

	this.map = null;

	this._playing = false;

	this._visible = true;
}

TimedTile.prototype = Object.assign(Object.create(Timed.prototype), {
	setMap: function setMap(map) {

		this.map = map;

		var layer = this._layerList[this._current];

		layer && layer.setMap(map);
	},
	getMap: function getMap() {

		return this.map;
	},
	setzIndex: function setzIndex(index) {

		this.map = map;

		var layer = this._layerList[this._current];

		layer && layer.setzIndex(index);
	},
	getzIndex: function getzIndex() {

		return this.map;
	},
	hide: function hide() {
		this._visible = false;

		var layer = this._layerList[this._current];

		layer && layer.hide();
	},
	show: function show() {
		this._visible = true;

		var layer = this._layerList[this._current];

		layer && layer.show();
	},
	_layerLoadedHandler: function _layerLoadedHandler() {
		var _this = this;

		var layer = this._layerList[this._current];
		layer._allLoaded = true;
		layer.off('complete', this._layerLoadedHandler, this);

		if (!this._playing) return;

		this._timeout = setTimeout(function () {
			_this._next();
		}, this.options.duration * 1000);
	},
	_next: function _next() {

		var current = this._current;
		var index = current + 1;
		index = index > this._layerList.length - 1 ? 0 : index;
		var layer = this._setIndex(index);

		if (!layer._allLoaded) {
			layer.on('complete', this._layerLoadedHandler, this);
		} else {
			this._layerLoadedHandler();
		}
	},


	_setIndex: function _setIndex(index) {

		if (!this.map || !this._layerList || index < 0 || index > this._layerList.length - 1) return null;

		var currentLayer = this._layerList[this._current];

		currentLayer && currentLayer.setMap(null);

		this._current = index;

		var layer = this._layerList[this._current];

		layer.setMap(this.map);

		if (this._visible) {
			layer.show();
		} else {
			layer.hide();
		}

		return layer;
	},

	setLayers: function setLayers(layers) {
		this._layerList = layers;
	},
	play: function play() {

		if (this._playing) return;

		this._playing = true;

		var layer = this._setIndex(this._current);

		if (!layer._allLoaded) {
			layer.on('complete', this._layerLoadedHandler, this);
		} else {
			this._layerLoadedHandler();
		}
	},
	stop: function stop() {

		this._playing = false;
		clearTimeout(this._timeout);
		this._setIndex(0);
	},
	pause: function pause() {

		this._playing = false;
		clearTimeout(this._timeout);
	}
});

function TimedHeat(url, dataFunc, options) {
	var _this = this;

	Timed.call(this, url, options);
	Heat.call(this, url, dataFunc, options);

	this._t = 0;

	this._redraw = function () {

		var data = _this.dataSet.filter(function (item) {

			if (item.attr && item.attr.t) {
				var t = item.attr.t;

				if (_this.options.timeAccumulate) {
					return t <= _this._t;
				}

				return t === _this._t;
			}

			return true;
		});

		_this._heatmap.setDataSet({
			max: options.topValue,
			data: data
		});
	};
}

TimedHeat.prototype = Object.assign(Object.create(Timed.prototype), Object.create(Heat.prototype), {
	_next: function _next() {
		var _this2 = this;

		this._t++;

		this._t = this._t > this.options.frameCount ? 1 : this._t;

		this._redraw();

		this._timeout = setTimeout(function () {
			_this2._next();
		}, this.options.duration * 1000);
	},
	play: function play() {

		if (this._playing) return;

		this._playing = true;
		this._next();
	},
	pause: function pause() {

		this._playing = false;
		clearTimeout(this._timeout);
	},
	stop: function stop() {

		this._playing = false;
		this._t = 0;
		clearTimeout(this._timeout);
	}
});

var retina = window.devicePixelRatio >= 1.5 || window.matchMedia && window.matchMedia('(-webkit-min-device-pixel-ratio: 1.5),(-moz-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5),(min-resolution: 1.5dppx)').matches;
var RETINA_STRING = retina ? '@2x' : '';

function encodeConfigJson(layer) {

    var dataUid = layer.dataUid;
    var dataType = layer.dataType;
    var filter = layer.filter;
    var config = layer.config;
    var animated = layer.animated;
    var interactivity = layer.interactivity;
    var json = null;

    if (config.type == Constants.configTypes.MARKER_HEAT || !animated) {

        json = {
            dataUid: dataUid,
            dataType: dataType,
            filter: filter,
            interactivity: interactivity,
            vizConfig: config.toJSON ? config.toJSON() : config
        };
    } else {

        // 时态
        var breaks = layer.timeBreaks;
        var timeField = layer.timeField;
        var list = [];
        var ta = layer.timeAccumulate;
        var type = layer.tipType;
        for (var i = 0; i < breaks.length; i++) {
            var b = breaks[i];
            var f = void 0;
            if (ta || i == 0) {
                if (type == 'date') {
                    f = timeField + '<=to_timestamp(' + b / 1000 + ')';
                } else {
                    f = timeField + '<=' + b;
                }
            } else {
                if (type == 'date') {
                    f = timeField + '<=to_timestamp(' + b / 1000 + ') and ' + timeField + '>to_timestamp(' + breaks[i - 1] / 1000 + ')';
                } else {
                    f = timeField + '<=' + b + ' and ' + timeField + '>' + breaks[i - 1];
                }
            }
            if (filter) {
                f += ' and ' + filter;
            }
            list.push({
                dataUid: dataUid,
                dataType: dataType,
                filter: f,
                vizConfig: config.toJSON()
            });
        }
        json = list;
    }

    return JSON.stringify(json);
}

function getConfigData(data, options, callback) {

    var url = options.host + options.uri + 'config';

    if (options.ak) {
        url += '?ak=' + options.ak;
    }

    ajax(url, {
        type: 'POST',
        data: data,
        success: function success(xhr, res) {
            callback(JSON.parse(res));
        }
    });
}

function getHeatLayer(layerData, options) {
    var config = layerData.config;

    var dataFunc = function dataFunc(tileInfo, data, layerOptions) {
        if (!data.data || data.data.length == 0) {
            return;
        }
        var x = tileInfo[0],
            y = tileInfo[1],
            z = tileInfo[2];
        var res = layerOptions.zoomReses[z];
        var dataPoints = [];
        var xx = void 0,
            yy = void 0,
            value = void 0,
            mapx = void 0,
            mapy = void 0,
            time = void 0;

        data = data.data;

        for (var i = 0; i < data.length; i++) {
            xx = data[i].x__uint8;
            yy = data[i].y__uint8;
            value = data[i].vals__uint8[0];
            mapx = (256 * x + config.resolution * (xx + 0.5)) * res + layerOptions.originX;
            mapy = layerOptions.originY - (256 * (y + 1) - config.resolution * (yy + 0.5)) * res;

            var _WebMercator$unprojec = WebMercator.unproject(mapx, mapy),
                _WebMercator$unprojec2 = slicedToArray(_WebMercator$unprojec, 2),
                lng = _WebMercator$unprojec2[0],
                lat = _WebMercator$unprojec2[1];

            for (var j = 0; j < data[i].vals__uint8.length; j++) {
                value = data[i].vals__uint8[j];
                time = data[i].dates__uint16[j];
                time += 1;

                dataPoints.push({
                    lng: lng,
                    lat: lat,
                    count: value,
                    attr: {
                        t: time
                    }
                });
            }
        }
        return dataPoints;
    };

    var layerOptions = {
        topValue: config.heatTopValue,
        radius: config.heatSize,
        minOpacity: config.heatMinOpacity,
        maxOpacity: config.heatMaxOpacity,
        radiusUnit: config.heatSizeUnit,
        colors: config.colors
    };

    var heatLayer = void 0;

    if (!config.animated) {

        heatLayer = new Heat(null, dataFunc, layerOptions);
    } else {

        layerOptions.frameCount = config.frameCount;
        layerOptions.duration = config.duration;
        layerOptions.timeAccumulate = config.timeAccumulate;

        heatLayer = new TimedHeat(null, dataFunc, layerOptions);
    }

    // if ( layerData.showLegend ) {
    //     let legendData = getLegendData( layerData );
    //     heatLayer.setLegend( legendData )
    // }

    if (layerData.visible === false) {
        heatLayer.hide();
    }

    // heatLayer.name = layerData.dataName;


    getConfigData({
        configJson: encodeConfigJson(layerData)
    }, options, function (data) {
        if (data.code !== 0) return;

        var url = options.host + options.uri + data.data.vizId + '/0/{z}/{x}/{y}.json';

        if (options.ak) {
            url += '?ak=' + options.ak;
        }
        heatLayer.setTileUrl(url);
        heatLayer.reload();

        if (config.animated) {
            heatLayer.play();
        }
    });

    return heatLayer;
}

function createTimedTileLayer(vizId, options, mapVizOptions) {

    var tileHost = mapVizOptions.tileHost;

    if (mapVizOptions.cluster) {
        tileHost = mapVizOptions.tileHost.replace(/\{(s)\}/, '{' + mapVizOptions.cluster.join(',') + '}');
    }

    var url = tileHost + mapVizOptions.uri + vizId + '/[z]/[x]/[y].png?retina=' + RETINA_STRING;

    if (mapVizOptions.ak) {
        url += '&ak=' + mapVizOptions.ak;
    }

    var newLayer = new AMap.TileLayer();

    newLayer.setTileUrl(url);

    return newLayer;
}

function getTileLayer(layerData, options) {

    var layerOptions = {
        keepResample: false,
        tileEnlarge: false,
        crossOrigin: '*'
    };

    if (options.cluster) {
        layerOptions.cluster = options.cluster;
    }

    // 限制大数据显示比例尺
    var maxRes = layerData.maxRes;
    if (maxRes) {
        layerOptions.maxRes = maxRes;
    }

    // extent和数据真实的extent相差较大，需要扩大2倍
    if (layerData.extent) {

        var extent = layerData.extent;

        var centerX = (extent[0] + extent[2]) / 2;
        var centerY = (extent[1] + extent[3]) / 2;

        var scale = 2;

        layerOptions.minX = (extent[0] - centerX) * scale + centerX;
        layerOptions.minY = (extent[1] - centerY) * scale + centerY;
        layerOptions.maxX = (extent[2] - centerX) * scale + centerX;
        layerOptions.maxY = (extent[3] - centerY) * scale + centerY;
    }

    var mapLayer = void 0;

    if (!layerData.animated) {

        mapLayer = new AMap.TileLayer();
    } else {

        mapLayer = new TimedTile(null, merge({}, layerOptions, {
            frameCount: layerData.frameCount,
            timeBreaks: layerData.timeBreaks,
            duration: layerData.duration
        }));
    }

    // mapLayer.setName( layerData.dataName );

    // if ( layerData.showLegend ) {
    //     let legendData = MapVizLegend.getLegendData( layerData );
    //     mapLayer.setLegend( legendData )
    // }

    mapLayer.hide();

    if (layerData.visible) {
        mapLayer.show();
    }

    if (layerData.interactivity) {

        layerOptions.showAttr = true;

        var utfGridLayer = new UTFGrid(null, layerOptions);

        utfGridLayer.hide();

        mapLayer._utfGridLayer = utfGridLayer;
    }

    var param = {
        configJson: encodeConfigJson(layerData),
        layerGrouped: !layerData.animated
    };

    getConfigData(param, options, function (data) {

        if (data.code !== 0) return;

        if (param.layerGrouped) {
            var tileHost = options.tileHost;

            if (options.cluster) {
                tileHost = options.tileHost.replace(/\{(s)\}/, '{' + options.cluster.join(',') + '}');
            }
            var templateUrl = tileHost + options.uri + data.data.vizId + '/[z]/[x]/[y].png?retina=' + RETINA_STRING;

            var utfUrl = options.tileHost + options.uri + data.data.vizId + '/0/{z}/{x}/{y}.grid';

            if (options.ak) {
                templateUrl += '&ak=' + options.ak;
                utfUrl += '?ak=' + options.ak;
            }

            mapLayer.setTileUrl(templateUrl);

            if (mapLayer._utfGridLayer) {
                mapLayer._utfGridLayer.setTileUrl(utfUrl);
            }

            if (layerData.visible) {
                mapLayer.show();

                if (mapLayer._utfGridLayer) {
                    mapLayer._utfGridLayer.show();
                }
            }
        } else {

            var tLayers = [];
            for (var i = 0; i < data.data.vizIds.length; i++) {
                var l = createTimedTileLayer(data.data.vizIds[i], layerOptions, options);
                tLayers.push(l);
            }

            mapLayer.setLayers(tLayers);

            mapLayer.play();
        }
    });

    return mapLayer;
}

var getLayers$1 = function getLayers(dataContent, options, noConvert) {

    var result = [];

    var dataContentLength = dataContent.length;

    var uriObj = isObject(options.uri) ? JSON.parse(JSON.stringify(options.uri)) : '';

    var uriMappingVal = '';

    for (var i = dataContentLength - 1; i >= 0; i--) {
        var layerData = dataContent[i];

        var configType = layerData.config.type;

        if (!noConvert) {
            var config = create(layerData.config);
            layerData.config = config;
        }

        var item = {
            name: layerData.dataName,
            dataUid: layerData.dataUid,
            dataType: layerData.dataType,
            fields: layerData.fields,
            visible: layerData.visible,
            geometryType: layerData.geometryType,
            animated: layerData.animated !== undefined ? layerData.animated : layerData.config.animated,
            extent: layerData.extent,
            config: layerData.config,
            vizData: layerData,
            layer: null
        };

        if (uriObj) {

            var uriError = false;

            try {

                uriMappingVal = uriObj[layerData.dataType];

                if (!uriMappingVal) {
                    uriError = true;
                    throw new Error('options中指定的 uri 对象与数据上图配置中的 dataType 属性值不匹配');
                }

                if (!isString(uriMappingVal)) {
                    uriError = true;
                    throw new Error('options中指定的 uri 对象格式错误');
                }
            } catch (e) {
                console.error(e);
            } finally {
                options.uri = uriError ? Constants.uri : uriMappingVal;
            }
        }

        if (configType == Constants.configTypes.MARKER_HEAT) {

            item.layer = getHeatLayer(layerData, options);
        } else if (configType == Constants.configTypes.MARKER_FLUID) {

            console.warn('AMap GeoHey MapViz: 不支持流体场图');
        } else {

            item.layer = getTileLayer(layerData, options);

            if (item.layer._utfGridLayer) {
                item.utfGridLayer = item.layer._utfGridLayer;
            }

            layerData.config.animated = layerData.animated;
        }

        result.push(item);
    }

    return result;
};

var MapVizLayers = {
    getLayers: getLayers$1
};

var getLayers = MapVizLayers.getLayers;

function get(uid, options, map, callback) {

    options = options || {};

    options.uri = options.uri || Constants.uri;

    if (!options.host) {
        options.host = Constants.domain;
        options.tileHost = Constants.tileHost;
        options.cluster = Constants.geoheyServerCluster;
    }

    var url = options.host + '/s/mapviz/' + uid;

    if (options.ak) {
        url += '?ak=' + options.ak;
    }

    if (!options.tileHost) {
        options.tileHost = options.host;
    }

    ajax(url, {
        type: 'GET',
        error: function error(req) {
            console.error('mapviz请求失败');
        },
        success: function success(xhr, res) {
            var data = JSON.parse(res);
            if (data.code !== 0) {
                console.error(data.code + ':' + data.msg);
                return;
            }

            var dataContent = data.data.content;
            var mapContent = data.data.map;

            var list = dataContent ? getLayers(dataContent, options) : [];

            var result = {
                mapData: mapContent,
                setting: data.data.setting,
                vizData: data.data,
                layerList: list
            };

            if (map && map instanceof AMap.Map) {

                var layerList = result.layerList;

                for (var i = 0; i < layerList.length; i++) {

                    var item = layerList[i];
                    var layer = item.layer;

                    layer.setzIndex(i + 1);
                    layer.setMap(map);

                    if (item.utfGridLayer) {
                        item.utfGridLayer.setMap(map);
                    }
                }
            }

            if (typeof callback === 'function') {
                callback(result);
            }
        }
    });
}



var mapviz = Object.freeze({
	get: get
});

var getLayers$2 = MapVizLayers.getLayers;

function getDataContent(data) {
    var dataContent = JSON.parse(JSON.stringify(data));
    for (var i = 0; i < dataContent.length; i++) {
        var item = dataContent[i];
        item.config = item.vizConfig;
        item.visible = true;
        delete item.vizConfig;
    }
    return dataContent;
}

function get$2(data, options, map) {

    options = options || {};

    options.uri = options.uri || Constants.uri;

    if (!options.host) {
        options.host = Constants.domain;
        options.tileHost = Constants.tileHost;
        options.cluster = Constants.geoheyServerCluster;
    }

    var dataContent = getDataContent(data);

    var layerList = dataContent ? getLayers$2(dataContent, options, true) : [];

    if (map && map instanceof AMap.Map) {

        var layerArray = [];

        for (var i = 0; i < layerList.length; i++) {

            var item = layerList[i];
            var layer = item.layer;

            layer.setzIndex(i + 1);
            layer.setMap(map);

            if (item.utfGridLayer) {
                item.utfGridLayer.setMap(map);
            }

            layerArray.push({
                uid: item.dataUid,
                type: item.dataType
            });
        }

        layerArray.reverse();
    }

    return layerList;
}



var dataviz = Object.freeze({
	get: get$2
});

exports.MapViz = mapviz;
exports.DataViz = dataviz;

Object.defineProperty(exports, '__esModule', { value: true });

})));
